-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Calc.Par
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified Calc.Abs
import Calc.Lex

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&'       { PT _ (TS _ 4)  }
  '&&'      { PT _ (TS _ 5)  }
  '('       { PT _ (TS _ 6)  }
  ')'       { PT _ (TS _ 7)  }
  '*'       { PT _ (TS _ 8)  }
  '+'       { PT _ (TS _ 9)  }
  '++'      { PT _ (TS _ 10) }
  '+='      { PT _ (TS _ 11) }
  ','       { PT _ (TS _ 12) }
  '-'       { PT _ (TS _ 13) }
  '--'      { PT _ (TS _ 14) }
  '-='      { PT _ (TS _ 15) }
  '->'      { PT _ (TS _ 16) }
  '.'       { PT _ (TS _ 17) }
  '/'       { PT _ (TS _ 18) }
  ':'       { PT _ (TS _ 19) }
  '::'      { PT _ (TS _ 20) }
  ';'       { PT _ (TS _ 21) }
  '<'       { PT _ (TS _ 22) }
  '<<'      { PT _ (TS _ 23) }
  '<='      { PT _ (TS _ 24) }
  '='       { PT _ (TS _ 25) }
  '=='      { PT _ (TS _ 26) }
  '>'       { PT _ (TS _ 27) }
  '>='      { PT _ (TS _ 28) }
  '>>'      { PT _ (TS _ 29) }
  '?'       { PT _ (TS _ 30) }
  '['       { PT _ (TS _ 31) }
  ']'       { PT _ (TS _ 32) }
  'bool'    { PT _ (TS _ 33) }
  'char'    { PT _ (TS _ 34) }
  'const'   { PT _ (TS _ 35) }
  'do'      { PT _ (TS _ 36) }
  'double'  { PT _ (TS _ 37) }
  'else'    { PT _ (TS _ 38) }
  'for'     { PT _ (TS _ 39) }
  'if'      { PT _ (TS _ 40) }
  'int'     { PT _ (TS _ 41) }
  'return'  { PT _ (TS _ 42) }
  'throw'   { PT _ (TS _ 43) }
  'typedef' { PT _ (TS _ 44) }
  'using'   { PT _ (TS _ 45) }
  'void'    { PT _ (TS _ 46) }
  'while'   { PT _ (TS _ 47) }
  '{'       { PT _ (TS _ 48) }
  '||'      { PT _ (TS _ 49) }
  '}'       { PT _ (TS _ 50) }
  L_charac  { PT _ (TC $$)   }
  L_doubl   { PT _ (TD $$)   }
  L_integ   { PT _ (TI $$)   }
  L_quoted  { PT _ (TL $$)   }
  L_Id      { PT _ (T_Id $$) }

%%

Char    :: { Char }
Char     : L_charac { (read $1) :: Char }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Id :: { Calc.Abs.Id }
Id  : L_Id { Calc.Abs.Id $1 }

Program :: { Calc.Abs.Program }
Program : ListDef { Calc.Abs.ProgDef $1 }

Def :: { Calc.Abs.Def }
Def
  : 'using' QualConst ';' { Calc.Abs.QualConstDef $2 }
  | GenType ListInit ';' { Calc.Abs.StmDef $1 $2 }
  | GenType Id '(' ListArg ')' '{' ListStm '}' { Calc.Abs.FuncDef $1 $2 $4 $7 }
  | GenType Id '(' ListArg ')' ';' { Calc.Abs.FuncDef2 $1 $2 $4 }
  | 'typedef' GenType Id ';' { Calc.Abs.TypeDef $2 $3 }

ListDef :: { [Calc.Abs.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

ListArg :: { [Calc.Abs.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Arg :: { Calc.Abs.Arg }
Arg
  : GenType Init { Calc.Abs.ArgDecl2 $1 $2 }
  | GenType { Calc.Abs.ArgDecl3 $1 }

Stm :: { Calc.Abs.Stm }
Stm
  : GenType ListInit ';' { Calc.Abs.InitStm $1 $2 }
  | Exp ';' { Calc.Abs.StmExp $1 }
  | 'return' Stm { Calc.Abs.ReturnStm $2 }
  | 'while' '(' Exp ')' Stm { Calc.Abs.WhileStm $3 $5 }
  | 'if' '(' Exp ')' Stm { Calc.Abs.IfStm $3 $5 }
  | 'if' '(' Exp ')' Stm 'else' Stm { Calc.Abs.IfElseStm $3 $5 $7 }
  | 'for' '(' GenType Init ';' Exp ';' Exp ')' Stm { Calc.Abs.ForStm $3 $4 $6 $8 $10 }
  | 'do' Stm 'while' '(' Exp ')' ';' { Calc.Abs.DoWhileStm $2 $5 }
  | '{' ListStm '}' { Calc.Abs.BlockStm $2 }
  | 'typedef' GenType Id ';' { Calc.Abs.TypeDefStm $2 $3 }

ListStm :: { [Calc.Abs.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp1 :: { Calc.Abs.Exp }
Exp1 : 'throw' Exp1 { Calc.Abs.ThrowExcep $2 } | Exp2 { $1 }

Exp2 :: { Calc.Abs.Exp }
Exp2
  : Exp3 '=' Exp2 { Calc.Abs.AssignExp $1 $3 }
  | Exp3 '+=' Exp2 { Calc.Abs.PlusAssigExp $1 $3 }
  | Exp3 '-=' Exp2 { Calc.Abs.MinusAssigExp $1 $3 }
  | Exp3 '?' Exp ':' Exp2 { Calc.Abs.CondExp $1 $3 $5 }
  | Exp3 { $1 }

Exp3 :: { Calc.Abs.Exp }
Exp3 : Exp3 '||' Exp4 { Calc.Abs.DisjExp $1 $3 } | Exp4 { $1 }

Exp4 :: { Calc.Abs.Exp }
Exp4 : Exp4 '&&' Exp5 { Calc.Abs.ConjExp $1 $3 } | Exp5 { $1 }

Exp8 :: { Calc.Abs.Exp }
Exp8
  : Exp8 '==' Exp9 { Calc.Abs.EqExp $1 $3 }
  | Exp8 '!=' Exp9 { Calc.Abs.InEqExp $1 $3 }
  | Exp9 { $1 }

Exp9 :: { Calc.Abs.Exp }
Exp9
  : Exp9 '<' Exp10 { Calc.Abs.LessExp $1 $3 }
  | Exp9 '<=' Exp10 { Calc.Abs.LeqExp $1 $3 }
  | Exp9 '>=' Exp10 { Calc.Abs.GeqExp $1 $3 }
  | Exp9 '>' Exp10 { Calc.Abs.GreaterExp $1 $3 }
  | Exp10 { $1 }

Exp10 :: { Calc.Abs.Exp }
Exp10
  : Exp10 '<<' Exp11 { Calc.Abs.LShift $1 $3 }
  | Exp10 '>>' Exp11 { Calc.Abs.RShift $1 $3 }
  | Exp11 { $1 }

Exp11 :: { Calc.Abs.Exp }
Exp11
  : Exp11 '+' Exp12 { Calc.Abs.AddExp $1 $3 }
  | Exp11 '-' Exp12 { Calc.Abs.MinExp $1 $3 }
  | Exp12 { $1 }

Exp12 :: { Calc.Abs.Exp }
Exp12
  : Exp12 '*' Exp13 { Calc.Abs.MulExp $1 $3 }
  | Exp12 '/' Exp13 { Calc.Abs.DivExp $1 $3 }
  | Exp12 '%' Exp13 { Calc.Abs.ModExp $1 $3 }
  | Exp13 { $1 }

Exp13 :: { Calc.Abs.Exp }
Exp13
  : '++' Exp13 { Calc.Abs.Incr2Exp $2 }
  | '--' Exp13 { Calc.Abs.Decr2Exp $2 }
  | '!' Exp13 { Calc.Abs.NegExp $2 }
  | '*' Exp13 { Calc.Abs.DeRefExp $2 }
  | Exp14 { $1 }

Exp14 :: { Calc.Abs.Exp }
Exp14
  : Exp14 '++' { Calc.Abs.Incr1Exp $1 }
  | Exp14 '--' { Calc.Abs.Decr1Exp $1 }
  | Exp14 '[' Exp ']' { Calc.Abs.IndexExp $1 $3 }
  | Exp14 '(' ListExp ')' { Calc.Abs.FunCallExp $1 $3 }
  | Exp14 '.' Exp15 { Calc.Abs.DotStrucProjExp $1 $3 }
  | Exp14 '->' Exp15 { Calc.Abs.ArrStrucProjExp $1 $3 }
  | Exp15 { $1 }

Exp15 :: { Calc.Abs.Exp }
Exp15
  : Integer { Calc.Abs.IntExp $1 }
  | Double { Calc.Abs.DoubleExp $1 }
  | ListString { Calc.Abs.StringArrExp $1 }
  | Char { Calc.Abs.CharExp $1 }
  | QualConst { Calc.Abs.QualConstExp $1 }
  | '(' Exp ')' { $2 }

ListExp :: { [Calc.Abs.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }

QualConst :: { Calc.Abs.QualConst }
QualConst : ListId { Calc.Abs.QualConstDecls $1 }

ListId :: { [Calc.Abs.Id] }
ListId : Id { (:[]) $1 } | Id '::' ListId { (:) $1 $3 }

Type :: { Calc.Abs.Type }
Type
  : 'char' { Calc.Abs.CharType }
  | 'bool' { Calc.Abs.BoolType }
  | 'double' { Calc.Abs.DoubleType }
  | 'int' { Calc.Abs.IntType }
  | 'void' { Calc.Abs.VoidType }
  | QualConst { Calc.Abs.QualConstType $1 }

GenType :: { Calc.Abs.GenType }
GenType
  : Type { Calc.Abs.GenTypeDecl $1 }
  | 'const' Type { Calc.Abs.ConstGenType $2 }
  | Type '&' { Calc.Abs.AndGenType $1 }
  | 'const' Type '&' { Calc.Abs.CAndGenType $2 }

Init :: { Calc.Abs.Init }
Init
  : Id { Calc.Abs.InitDecl $1 }
  | Id '=' Exp { Calc.Abs.InitAssign $1 $3 }

ListInit :: { [Calc.Abs.Init] }
ListInit : Init { (:[]) $1 } | Init ',' ListInit { (:) $1 $3 }

Exp :: { Calc.Abs.Exp }
Exp : Exp1 { $1 }

Exp5 :: { Calc.Abs.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { Calc.Abs.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { Calc.Abs.Exp }
Exp7 : Exp8 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

