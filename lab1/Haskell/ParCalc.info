-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ParCalc.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListDef -> ListDef                         (1)
	%start_pDef -> Def                                 (2)
	%start_pListArg -> ListArg                         (3)
	%start_pListStm -> ListStm                         (4)
	%start_pArg -> Arg                                 (5)
	%start_pStm -> Stm                                 (6)
	%start_pExp -> Exp                                 (7)
	%start_pType -> Type                               (8)
	%start_pExp1 -> Exp1                               (9)
	Double -> L_doubl                                  (10)
	Integer -> L_integ                                 (11)
	String -> L_quoted                                 (12)
	Id -> L_Id                                         (13)
	Program -> ListDef                                 (14)
	ListDef ->                                         (15)
	ListDef -> Def ListDef                             (16)
	Def -> Type Id '(' ListArg ')' '{' ListStm '}'     (17)
	ListArg ->                                         (18)
	ListArg -> Arg                                     (19)
	ListArg -> Arg ',' ListArg                         (20)
	ListStm ->                                         (21)
	ListStm -> Stm ListStm                             (22)
	Arg -> Type Id                                     (23)
	Stm -> 'std::cout' '<<' Exp '<<' 'std::endl' ';'   (24)
	Stm -> 'return' Exp ';'                            (25)
	Exp -> Integer                                     (26)
	Exp -> Double                                      (27)
	Exp -> String                                      (28)
	Exp -> Exp1                                        (29)
	Type -> 'bool'                                     (30)
	Type -> 'double'                                   (31)
	Type -> 'int'                                      (32)
	Type -> 'void'                                     (33)
	Exp1 -> '(' Exp ')'                                (34)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'<<'           { PT _ (TS _ 5) }
	'bool'         { PT _ (TS _ 6) }
	'double'       { PT _ (TS _ 7) }
	'int'          { PT _ (TS _ 8) }
	'return'       { PT _ (TS _ 9) }
	'std::cout'    { PT _ (TS _ 10) }
	'std::endl'    { PT _ (TS _ 11) }
	'void'         { PT _ (TS _ 12) }
	'{'            { PT _ (TS _ 13) }
	'}'            { PT _ (TS _ 14) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }
	L_Id           { PT _ (T_Id $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListDef rule  1
	%start_pDef     rule  2
	%start_pListArg rule  3
	%start_pListStm rule  4
	%start_pArg     rule  5
	%start_pStm     rule  6
	%start_pExp     rule  7
	%start_pType    rule  8
	%start_pExp1    rule  9
	Double          rule  10
	Integer         rule  11
	String          rule  12
	Id              rule  13
	Program         rule  14
	ListDef         rules 15, 16
	Def             rule  17
	ListArg         rules 18, 19, 20
	ListStm         rules 21, 22
	Arg             rule  23
	Stm             rules 24, 25
	Exp             rules 26, 27, 28, 29
	Type            rules 30, 31, 32, 33
	Exp1            rule  34

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18
	%eof           reduce using rule 15

	Program        goto state 39
	ListDef        goto state 40
	Def            goto state 38
	Type           goto state 36

State 1

	%start_pListDef -> . ListDef                        (rule 1)

	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18
	%eof           reduce using rule 15

	ListDef        goto state 37
	Def            goto state 38
	Type           goto state 36

State 2

	%start_pDef -> . Def                                (rule 2)

	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18

	Def            goto state 35
	Type           goto state 36

State 3

	%start_pListArg -> . ListArg                        (rule 3)

	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18
	%eof           reduce using rule 18

	ListArg        goto state 33
	Arg            goto state 34
	Type           goto state 30

State 4

	%start_pListStm -> . ListStm                        (rule 4)

	'return'       shift, and enter state 27
	'std::cout'    shift, and enter state 28
	%eof           reduce using rule 21

	ListStm        goto state 31
	Stm            goto state 32

State 5

	%start_pArg -> . Arg                                (rule 5)

	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18

	Arg            goto state 29
	Type           goto state 30

State 6

	%start_pStm -> . Stm                                (rule 6)

	'return'       shift, and enter state 27
	'std::cout'    shift, and enter state 28

	Stm            goto state 26

State 7

	%start_pExp -> . Exp                                (rule 7)

	'('            shift, and enter state 13
	L_doubl        shift, and enter state 11
	L_integ        shift, and enter state 24
	L_quoted       shift, and enter state 25

	Double         goto state 19
	Integer        goto state 20
	String         goto state 21
	Exp            goto state 22
	Exp1           goto state 23

State 8

	%start_pType -> . Type                              (rule 8)

	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18

	Type           goto state 14

State 9

	%start_pExp1 -> . Exp1                              (rule 9)

	'('            shift, and enter state 13

	Exp1           goto state 12

State 10

	Double -> . L_doubl                                 (rule 10)

	L_doubl        shift, and enter state 11


State 11

	Double -> L_doubl .                                 (rule 10)

	')'            reduce using rule 10
	';'            reduce using rule 10
	'<<'           reduce using rule 10
	%eof           reduce using rule 10


State 12

	%start_pExp1 -> Exp1 .                              (rule 9)

	%eof           accept


State 13

	Exp1 -> '(' . Exp ')'                               (rule 34)

	'('            shift, and enter state 13
	L_doubl        shift, and enter state 11
	L_integ        shift, and enter state 24
	L_quoted       shift, and enter state 25

	Double         goto state 19
	Integer        goto state 20
	String         goto state 21
	Exp            goto state 49
	Exp1           goto state 23

State 14

	%start_pType -> Type .                              (rule 8)

	%eof           accept


State 15

	Type -> 'bool' .                                    (rule 30)

	L_Id           reduce using rule 30
	%eof           reduce using rule 30


State 16

	Type -> 'double' .                                  (rule 31)

	L_Id           reduce using rule 31
	%eof           reduce using rule 31


State 17

	Type -> 'int' .                                     (rule 32)

	L_Id           reduce using rule 32
	%eof           reduce using rule 32


State 18

	Type -> 'void' .                                    (rule 33)

	L_Id           reduce using rule 33
	%eof           reduce using rule 33


State 19

	Exp -> Double .                                     (rule 27)

	')'            reduce using rule 27
	';'            reduce using rule 27
	'<<'           reduce using rule 27
	%eof           reduce using rule 27


State 20

	Exp -> Integer .                                    (rule 26)

	')'            reduce using rule 26
	';'            reduce using rule 26
	'<<'           reduce using rule 26
	%eof           reduce using rule 26


State 21

	Exp -> String .                                     (rule 28)

	')'            reduce using rule 28
	';'            reduce using rule 28
	'<<'           reduce using rule 28
	%eof           reduce using rule 28


State 22

	%start_pExp -> Exp .                                (rule 7)

	%eof           accept


State 23

	Exp -> Exp1 .                                       (rule 29)

	')'            reduce using rule 29
	';'            reduce using rule 29
	'<<'           reduce using rule 29
	%eof           reduce using rule 29


State 24

	Integer -> L_integ .                                (rule 11)

	')'            reduce using rule 11
	';'            reduce using rule 11
	'<<'           reduce using rule 11
	%eof           reduce using rule 11


State 25

	String -> L_quoted .                                (rule 12)

	')'            reduce using rule 12
	';'            reduce using rule 12
	'<<'           reduce using rule 12
	%eof           reduce using rule 12


State 26

	%start_pStm -> Stm .                                (rule 6)

	%eof           accept


State 27

	Stm -> 'return' . Exp ';'                           (rule 25)

	'('            shift, and enter state 13
	L_doubl        shift, and enter state 11
	L_integ        shift, and enter state 24
	L_quoted       shift, and enter state 25

	Double         goto state 19
	Integer        goto state 20
	String         goto state 21
	Exp            goto state 48
	Exp1           goto state 23

State 28

	Stm -> 'std::cout' . '<<' Exp '<<' 'std::endl' ';'    (rule 24)

	'<<'           shift, and enter state 47


State 29

	%start_pArg -> Arg .                                (rule 5)

	%eof           accept


State 30

	Arg -> Type . Id                                    (rule 23)

	L_Id           shift, and enter state 43

	Id             goto state 46

State 31

	%start_pListStm -> ListStm .                        (rule 4)

	%eof           accept


State 32

	ListStm -> Stm . ListStm                            (rule 22)

	'return'       shift, and enter state 27
	'std::cout'    shift, and enter state 28
	'}'            reduce using rule 21
	%eof           reduce using rule 21

	ListStm        goto state 45
	Stm            goto state 32

State 33

	%start_pListArg -> ListArg .                        (rule 3)

	%eof           accept


State 34

	ListArg -> Arg .                                    (rule 19)
	ListArg -> Arg . ',' ListArg                        (rule 20)

	')'            reduce using rule 19
	','            shift, and enter state 44
	%eof           reduce using rule 19


State 35

	%start_pDef -> Def .                                (rule 2)

	%eof           accept


State 36

	Def -> Type . Id '(' ListArg ')' '{' ListStm '}'    (rule 17)

	L_Id           shift, and enter state 43

	Id             goto state 42

State 37

	%start_pListDef -> ListDef .                        (rule 1)

	%eof           accept


State 38

	ListDef -> Def . ListDef                            (rule 16)

	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18
	%eof           reduce using rule 15

	ListDef        goto state 41
	Def            goto state 38
	Type           goto state 36

State 39

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 40

	Program -> ListDef .                                (rule 14)

	%eof           reduce using rule 14


State 41

	ListDef -> Def ListDef .                            (rule 16)

	%eof           reduce using rule 16


State 42

	Def -> Type Id . '(' ListArg ')' '{' ListStm '}'    (rule 17)

	'('            shift, and enter state 54


State 43

	Id -> L_Id .                                        (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	%eof           reduce using rule 13


State 44

	ListArg -> Arg ',' . ListArg                        (rule 20)

	')'            reduce using rule 18
	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18
	%eof           reduce using rule 18

	ListArg        goto state 53
	Arg            goto state 34
	Type           goto state 30

State 45

	ListStm -> Stm ListStm .                            (rule 22)

	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 46

	Arg -> Type Id .                                    (rule 23)

	')'            reduce using rule 23
	','            reduce using rule 23
	%eof           reduce using rule 23


State 47

	Stm -> 'std::cout' '<<' . Exp '<<' 'std::endl' ';'    (rule 24)

	'('            shift, and enter state 13
	L_doubl        shift, and enter state 11
	L_integ        shift, and enter state 24
	L_quoted       shift, and enter state 25

	Double         goto state 19
	Integer        goto state 20
	String         goto state 21
	Exp            goto state 52
	Exp1           goto state 23

State 48

	Stm -> 'return' Exp . ';'                           (rule 25)

	';'            shift, and enter state 51


State 49

	Exp1 -> '(' Exp . ')'                               (rule 34)

	')'            shift, and enter state 50


State 50

	Exp1 -> '(' Exp ')' .                               (rule 34)

	')'            reduce using rule 34
	';'            reduce using rule 34
	'<<'           reduce using rule 34
	%eof           reduce using rule 34


State 51

	Stm -> 'return' Exp ';' .                           (rule 25)

	'return'       reduce using rule 25
	'std::cout'    reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 52

	Stm -> 'std::cout' '<<' Exp . '<<' 'std::endl' ';'    (rule 24)

	'<<'           shift, and enter state 56


State 53

	ListArg -> Arg ',' ListArg .                        (rule 20)

	')'            reduce using rule 20
	%eof           reduce using rule 20


State 54

	Def -> Type Id '(' . ListArg ')' '{' ListStm '}'    (rule 17)

	')'            reduce using rule 18
	'bool'         shift, and enter state 15
	'double'       shift, and enter state 16
	'int'          shift, and enter state 17
	'void'         shift, and enter state 18

	ListArg        goto state 55
	Arg            goto state 34
	Type           goto state 30

State 55

	Def -> Type Id '(' ListArg . ')' '{' ListStm '}'    (rule 17)

	')'            shift, and enter state 58


State 56

	Stm -> 'std::cout' '<<' Exp '<<' . 'std::endl' ';'    (rule 24)

	'std::endl'    shift, and enter state 57


State 57

	Stm -> 'std::cout' '<<' Exp '<<' 'std::endl' . ';'    (rule 24)

	';'            shift, and enter state 60


State 58

	Def -> Type Id '(' ListArg ')' . '{' ListStm '}'    (rule 17)

	'{'            shift, and enter state 59


State 59

	Def -> Type Id '(' ListArg ')' '{' . ListStm '}'    (rule 17)

	'return'       shift, and enter state 27
	'std::cout'    shift, and enter state 28
	'}'            reduce using rule 21

	ListStm        goto state 61
	Stm            goto state 32

State 60

	Stm -> 'std::cout' '<<' Exp '<<' 'std::endl' ';' .    (rule 24)

	'return'       reduce using rule 24
	'std::cout'    reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 61

	Def -> Type Id '(' ListArg ')' '{' ListStm . '}'    (rule 17)

	'}'            shift, and enter state 62


State 62

	Def -> Type Id '(' ListArg ')' '{' ListStm '}' .    (rule 17)

	'bool'         reduce using rule 17
	'double'       reduce using rule 17
	'int'          reduce using rule 17
	'void'         reduce using rule 17
	%eof           reduce using rule 17


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 35
Number of terminals: 18
Number of non-terminals: 24
Number of states: 63
