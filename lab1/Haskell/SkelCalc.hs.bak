-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelCalc where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCalc

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsCalc.Id -> Result
transId x = case x of
  AbsCalc.Id string -> failure x

transProgram :: AbsCalc.Program -> Result
transProgram x = case x of
  AbsCalc.PDefs defs -> failure x

transDef :: AbsCalc.Def -> Result
transDef x = case x of
  AbsCalc.DFun type_ id args stms -> failure x

transArg :: AbsCalc.Arg -> Result
transArg x = case x of
  AbsCalc.ADecl type_ id -> failure x

transStm :: AbsCalc.Stm -> Result
transStm x = case x of
  AbsCalc.SCout exp -> failure x
  AbsCalc.SReturn exp -> failure x

transExp :: AbsCalc.Exp -> Result
transExp x = case x of
  AbsCalc.EInt integer -> failure x
  AbsCalc.EDouble double -> failure x

transType :: AbsCalc.Type -> Result
transType x = case x of
  AbsCalc.Tbool -> failure x
  AbsCalc.Tdouble -> failure x
  AbsCalc.Tint -> failure x
  AbsCalc.Tvoid -> failure x
