// File generated by the BNF Converter (bnfc 2.9.3).

package calc;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  calc.Absyn.Program.Visitor<calc.Absyn.Program,A>,
  calc.Absyn.Def.Visitor<calc.Absyn.Def,A>,
  calc.Absyn.Arg.Visitor<calc.Absyn.Arg,A>,
  calc.Absyn.Stm.Visitor<calc.Absyn.Stm,A>,
  calc.Absyn.Exp.Visitor<calc.Absyn.Exp,A>,
  calc.Absyn.Type.Visitor<calc.Absyn.Type,A>
{
    /* Program */
    public calc.Absyn.Program visit(calc.Absyn.ProgDef p, A arg)
    {
      calc.Absyn.ListDef listdef_ = new calc.Absyn.ListDef();
      for (calc.Absyn.Def x : p.listdef_)
      {
        listdef_.add(x.accept(this,arg));
      }
      return new calc.Absyn.ProgDef(listdef_);
    }

    /* Def */
    public calc.Absyn.Def visit(calc.Absyn.QualConstDef p, A arg)
    {
      calc.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new calc.Absyn.QualConstDef(exp_);
    }
    public calc.Absyn.Def visit(calc.Absyn.FuncDef p, A arg)
    {
      calc.Absyn.Type type_ = p.type_.accept(this, arg);
      String id_ = p.id_;
      calc.Absyn.ListArg listarg_ = new calc.Absyn.ListArg();
      for (calc.Absyn.Arg x : p.listarg_)
      {
        listarg_.add(x.accept(this,arg));
      }
      calc.Absyn.ListStm liststm_ = new calc.Absyn.ListStm();
      for (calc.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new calc.Absyn.FuncDef(type_, id_, listarg_, liststm_);
    }

    /* Arg */
    public calc.Absyn.Arg visit(calc.Absyn.ArgDecl p, A arg)
    {
      calc.Absyn.Type type_ = p.type_.accept(this, arg);
      String id_ = p.id_;
      return new calc.Absyn.ArgDecl(type_, id_);
    }

    /* Stm */
    public calc.Absyn.Stm visit(calc.Absyn.StmDef p, A arg)
    {
      calc.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new calc.Absyn.StmDef(exp_);
    }
    public calc.Absyn.Stm visit(calc.Absyn.StmDecl p, A arg)
    {
      calc.Absyn.Type type_ = p.type_.accept(this, arg);
      String id_ = p.id_;
      return new calc.Absyn.StmDecl(type_, id_);
    }
    public calc.Absyn.Stm visit(calc.Absyn.StmDecl2 p, A arg)
    {
      calc.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      String id_ = p.id_;
      return new calc.Absyn.StmDecl2(exp_, id_);
    }
    public calc.Absyn.Stm visit(calc.Absyn.StmDecls p, A arg)
    {
      calc.Absyn.Type type_ = p.type_.accept(this, arg);
      String id_ = p.id_;
      calc.Absyn.ListId listid_ = p.listid_;
      return new calc.Absyn.StmDecls(type_, id_, listid_);
    }
    public calc.Absyn.Stm visit(calc.Absyn.StmInit p, A arg)
    {
      calc.Absyn.Type type_ = p.type_.accept(this, arg);
      String id_ = p.id_;
      calc.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new calc.Absyn.StmInit(type_, id_, exp_);
    }
    public calc.Absyn.Stm visit(calc.Absyn.ReturnStm p, A arg)
    {
      calc.Absyn.Stm stm_ = p.stm_.accept(this, arg);
      return new calc.Absyn.ReturnStm(stm_);
    }

    /* Exp */
    public calc.Absyn.Exp visit(calc.Absyn.LShift p, A arg)
    {
      calc.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      calc.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new calc.Absyn.LShift(exp_1, exp_2);
    }
    public calc.Absyn.Exp visit(calc.Absyn.RShift p, A arg)
    {
      calc.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      calc.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new calc.Absyn.RShift(exp_1, exp_2);
    }
    public calc.Absyn.Exp visit(calc.Absyn.IntExp p, A arg)
    {
      Integer integer_ = p.integer_;
      return new calc.Absyn.IntExp(integer_);
    }
    public calc.Absyn.Exp visit(calc.Absyn.DoubleExp p, A arg)
    {
      Double double_ = p.double_;
      return new calc.Absyn.DoubleExp(double_);
    }
    public calc.Absyn.Exp visit(calc.Absyn.StringExp p, A arg)
    {
      String string_ = p.string_;
      return new calc.Absyn.StringExp(string_);
    }
    public calc.Absyn.Exp visit(calc.Absyn.QualConstExp p, A arg)
    {
      calc.Absyn.ListId listid_ = p.listid_;
      return new calc.Absyn.QualConstExp(listid_);
    }

    /* Type */
    public calc.Absyn.Type visit(calc.Absyn.BoolType p, A arg)
    {
      return new calc.Absyn.BoolType();
    }
    public calc.Absyn.Type visit(calc.Absyn.DoubleType p, A arg)
    {
      return new calc.Absyn.DoubleType();
    }
    public calc.Absyn.Type visit(calc.Absyn.IntType p, A arg)
    {
      return new calc.Absyn.IntType();
    }
    public calc.Absyn.Type visit(calc.Absyn.VoidType p, A arg)
    {
      return new calc.Absyn.VoidType();
    }
}
