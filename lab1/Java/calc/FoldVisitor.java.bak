// File generated by the BNF Converter (bnfc 2.9.3).

package calc;

/** Fold Visitor */
public abstract class FoldVisitor<R,A> implements AllVisitor<R,A> {
    public abstract R leaf(A arg);
    public abstract R combine(R x, R y, A arg);

/* Program */
    public R visit(calc.Absyn.ProgDef p, A arg) {
      R r = leaf(arg);
      for (calc.Absyn.Def x : p.listdef_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* Def */
    public R visit(calc.Absyn.QualConstDef p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.FuncDef p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      for (calc.Absyn.Arg x : p.listarg_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (calc.Absyn.Stm x : p.liststm_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* Arg */
    public R visit(calc.Absyn.ArgDecl p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* Stm */
    public R visit(calc.Absyn.StmDef p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.StmDecl p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.StmDecl2 p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.StmDecls p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.StmInit p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.ReturnStm p, A arg) {
      R r = leaf(arg);
      r = combine(p.stm_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.WhileStm p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      r = combine(p.stm_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.IfStm p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      r = combine(p.stm_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.IfElseStm p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      r = combine(p.stm_1.accept(this, arg), r, arg);
      r = combine(p.stm_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.BlockStm p, A arg) {
      R r = leaf(arg);
      for (calc.Absyn.Stm x : p.liststm_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(calc.Absyn.TypeDefStm p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.ConstTypeDefStm p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* Exp */
    public R visit(calc.Absyn.LShift p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_1.accept(this, arg), r, arg);
      r = combine(p.exp_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.RShift p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_1.accept(this, arg), r, arg);
      r = combine(p.exp_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.IndexExp p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_1.accept(this, arg), r, arg);
      r = combine(p.exp_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(calc.Absyn.FunCallExp p, A arg) {
      R r = leaf(arg);
      r = combine(p.exp_.accept(this, arg), r, arg);
      for (calc.Absyn.Exp x : p.listexp_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(calc.Absyn.IntExp p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(calc.Absyn.DoubleExp p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(calc.Absyn.StringExp p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(calc.Absyn.QualConstExp p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* Type */
    public R visit(calc.Absyn.BoolType p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(calc.Absyn.DoubleType p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(calc.Absyn.IntType p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(calc.Absyn.VoidType p, A arg) {
      R r = leaf(arg);
      return r;
    }


}
