// File generated by the BNF Converter (bnfc 2.9.3).

package calc;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(calc.Absyn.Program foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.Program foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.Def foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.Def foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.ListDef foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.ListDef foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.ListArg foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.ListArg foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.Arg foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.Arg foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.Stm foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.Stm foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.ListStm foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.ListStm foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.Exp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.Exp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.ListExp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.ListExp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.ListString foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.ListString foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.QualConst foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.QualConst foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.ListId foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.ListId foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.Type foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.Type foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.GenType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.GenType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.Init foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.Init foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(calc.Absyn.ListInit foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(calc.Absyn.ListInit foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(calc.Absyn.Program foo, int _i_)
  {
    if (foo instanceof calc.Absyn.ProgDef)
    {
       calc.Absyn.ProgDef _progdef = (calc.Absyn.ProgDef) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_progdef.listdef_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.Def foo, int _i_)
  {
    if (foo instanceof calc.Absyn.QualConstDef)
    {
       calc.Absyn.QualConstDef _qualconstdef = (calc.Absyn.QualConstDef) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("using");
       pp(_qualconstdef.qualconst_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.FuncDef)
    {
       calc.Absyn.FuncDef _funcdef = (calc.Absyn.FuncDef) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_funcdef.type_, 0);
       pp(_funcdef.id_, 0);
       render("(");
       pp(_funcdef.listarg_, 0);
       render(")");
       render("{");
       pp(_funcdef.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.ListDef foo, int _i_)
  {
    ppListDef(foo.iterator(), _i_);
  }

  private static void ppListDef(java.util.Iterator<calc.Absyn.Def> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      calc.Absyn.Def el = it.next();
      pp(el, _i_); ppListDef(it, _i_);
    }
  }


  private static void pp(calc.Absyn.ListArg foo, int _i_)
  {
    ppListArg(foo.iterator(), _i_);
  }

  private static void ppListArg(java.util.Iterator<calc.Absyn.Arg> it, int _i_)
  {
    if (it.hasNext())
    {
      calc.Absyn.Arg el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListArg(it, _i_);
      }
    }
  }


  private static void pp(calc.Absyn.Arg foo, int _i_)
  {
    if (foo instanceof calc.Absyn.ArgDecl)
    {
       calc.Absyn.ArgDecl _argdecl = (calc.Absyn.ArgDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_argdecl.type_, 0);
       pp(_argdecl.id_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.Stm foo, int _i_)
  {
    if (foo instanceof calc.Absyn.InitStm)
    {
       calc.Absyn.InitStm _initstm = (calc.Absyn.InitStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_initstm.gentype_, 0);
       pp(_initstm.listinit_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.StmDef)
    {
       calc.Absyn.StmDef _stmdef = (calc.Absyn.StmDef) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_stmdef.exp_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.ReturnStm)
    {
       calc.Absyn.ReturnStm _returnstm = (calc.Absyn.ReturnStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("return");
       pp(_returnstm.stm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.WhileStm)
    {
       calc.Absyn.WhileStm _whilestm = (calc.Absyn.WhileStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("while");
       render("(");
       pp(_whilestm.exp_, 0);
       render(")");
       pp(_whilestm.stm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.IfStm)
    {
       calc.Absyn.IfStm _ifstm = (calc.Absyn.IfStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("if");
       render("(");
       pp(_ifstm.exp_, 0);
       render(")");
       pp(_ifstm.stm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.IfElseStm)
    {
       calc.Absyn.IfElseStm _ifelsestm = (calc.Absyn.IfElseStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("if");
       render("(");
       pp(_ifelsestm.exp_, 0);
       render(")");
       pp(_ifelsestm.stm_1, 0);
       render("else");
       pp(_ifelsestm.stm_2, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.BlockStm)
    {
       calc.Absyn.BlockStm _blockstm = (calc.Absyn.BlockStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       pp(_blockstm.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.TypeDefStm)
    {
       calc.Absyn.TypeDefStm _typedefstm = (calc.Absyn.TypeDefStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("typedef");
       pp(_typedefstm.gentype_, 0);
       pp(_typedefstm.id_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.ListStm foo, int _i_)
  {
    ppListStm(foo.iterator(), _i_);
  }

  private static void ppListStm(java.util.Iterator<calc.Absyn.Stm> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      calc.Absyn.Stm el = it.next();
      pp(el, _i_); ppListStm(it, _i_);
    }
  }


  private static void pp(calc.Absyn.Exp foo, int _i_)
  {
    if (foo instanceof calc.Absyn.AssignExp)
    {
       calc.Absyn.AssignExp _assignexp = (calc.Absyn.AssignExp) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_assignexp.exp_1, 2);
       render("=");
       pp(_assignexp.exp_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.IncrExp)
    {
       calc.Absyn.IncrExp _increxp = (calc.Absyn.IncrExp) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_increxp.exp_1, 2);
       render("+=");
       pp(_increxp.exp_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.DecrExp)
    {
       calc.Absyn.DecrExp _decrexp = (calc.Absyn.DecrExp) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_decrexp.exp_1, 2);
       render("-=");
       pp(_decrexp.exp_2, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.CondExp)
    {
       calc.Absyn.CondExp _condexp = (calc.Absyn.CondExp) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_condexp.exp_1, 2);
       render("?");
       pp(_condexp.exp_2, 3);
       render(":");
       pp(_condexp.exp_3, 3);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.EqExp)
    {
       calc.Absyn.EqExp _eqexp = (calc.Absyn.EqExp) foo;
       if (_i_ > 8) render(_L_PAREN);
       pp(_eqexp.exp_1, 8);
       render("==");
       pp(_eqexp.exp_2, 9);
       if (_i_ > 8) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.InEqExp)
    {
       calc.Absyn.InEqExp _ineqexp = (calc.Absyn.InEqExp) foo;
       if (_i_ > 8) render(_L_PAREN);
       pp(_ineqexp.exp_1, 8);
       render("!=");
       pp(_ineqexp.exp_2, 9);
       if (_i_ > 8) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.LShift)
    {
       calc.Absyn.LShift _lshift = (calc.Absyn.LShift) foo;
       if (_i_ > 10) render(_L_PAREN);
       pp(_lshift.exp_1, 10);
       render("<<");
       pp(_lshift.exp_2, 11);
       if (_i_ > 10) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.RShift)
    {
       calc.Absyn.RShift _rshift = (calc.Absyn.RShift) foo;
       if (_i_ > 10) render(_L_PAREN);
       pp(_rshift.exp_1, 10);
       render(">>");
       pp(_rshift.exp_2, 11);
       if (_i_ > 10) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.AddExp)
    {
       calc.Absyn.AddExp _addexp = (calc.Absyn.AddExp) foo;
       if (_i_ > 11) render(_L_PAREN);
       pp(_addexp.exp_1, 11);
       render("+");
       pp(_addexp.exp_2, 12);
       if (_i_ > 11) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.MinExp)
    {
       calc.Absyn.MinExp _minexp = (calc.Absyn.MinExp) foo;
       if (_i_ > 11) render(_L_PAREN);
       pp(_minexp.exp_1, 11);
       render("-");
       pp(_minexp.exp_2, 12);
       if (_i_ > 11) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.MulExp)
    {
       calc.Absyn.MulExp _mulexp = (calc.Absyn.MulExp) foo;
       if (_i_ > 12) render(_L_PAREN);
       pp(_mulexp.exp_1, 12);
       render("*");
       pp(_mulexp.exp_2, 13);
       if (_i_ > 12) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.DivExp)
    {
       calc.Absyn.DivExp _divexp = (calc.Absyn.DivExp) foo;
       if (_i_ > 12) render(_L_PAREN);
       pp(_divexp.exp_1, 12);
       render("/");
       pp(_divexp.exp_2, 13);
       if (_i_ > 12) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.ModExp)
    {
       calc.Absyn.ModExp _modexp = (calc.Absyn.ModExp) foo;
       if (_i_ > 12) render(_L_PAREN);
       pp(_modexp.exp_1, 12);
       render("%");
       pp(_modexp.exp_2, 13);
       if (_i_ > 12) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.IndexExp)
    {
       calc.Absyn.IndexExp _indexexp = (calc.Absyn.IndexExp) foo;
       if (_i_ > 14) render(_L_PAREN);
       pp(_indexexp.exp_1, 14);
       render("[");
       pp(_indexexp.exp_2, 0);
       render("]");
       if (_i_ > 14) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.FunCallExp)
    {
       calc.Absyn.FunCallExp _funcallexp = (calc.Absyn.FunCallExp) foo;
       if (_i_ > 14) render(_L_PAREN);
       pp(_funcallexp.exp_, 14);
       render("(");
       pp(_funcallexp.listexp_, 0);
       render(")");
       if (_i_ > 14) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.DotStrucProjExp)
    {
       calc.Absyn.DotStrucProjExp _dotstrucprojexp = (calc.Absyn.DotStrucProjExp) foo;
       if (_i_ > 14) render(_L_PAREN);
       pp(_dotstrucprojexp.exp_1, 14);
       render(".");
       pp(_dotstrucprojexp.exp_2, 15);
       if (_i_ > 14) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.ArrStrucProjExp)
    {
       calc.Absyn.ArrStrucProjExp _arrstrucprojexp = (calc.Absyn.ArrStrucProjExp) foo;
       if (_i_ > 14) render(_L_PAREN);
       pp(_arrstrucprojexp.exp_1, 14);
       render("->");
       pp(_arrstrucprojexp.exp_2, 15);
       if (_i_ > 14) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.IntExp)
    {
       calc.Absyn.IntExp _intexp = (calc.Absyn.IntExp) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_intexp.integer_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.DoubleExp)
    {
       calc.Absyn.DoubleExp _doubleexp = (calc.Absyn.DoubleExp) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_doubleexp.double_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.StringArrExp)
    {
       calc.Absyn.StringArrExp _stringarrexp = (calc.Absyn.StringArrExp) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_stringarrexp.liststring_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.CharExp)
    {
       calc.Absyn.CharExp _charexp = (calc.Absyn.CharExp) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_charexp.char_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.QualConstExp)
    {
       calc.Absyn.QualConstExp _qualconstexp = (calc.Absyn.QualConstExp) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_qualconstexp.qualconst_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.ListExp foo, int _i_)
  {
    ppListExp(foo.iterator(), _i_);
  }

  private static void ppListExp(java.util.Iterator<calc.Absyn.Exp> it, int _i_)
  {
    if (it.hasNext())
    {
      calc.Absyn.Exp el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListExp(it, _i_);
      }
    }
  }


  private static void pp(calc.Absyn.ListString foo, int _i_)
  {
    ppListString(foo.iterator(), _i_);
  }

  private static void ppListString(java.util.Iterator<String> it, int _i_)
  {
    if (it.hasNext())
    {
      String el = it.next();
      if (!it.hasNext())
      { /* last */
        printQuoted(el);
      }
      else
      { /* cons */
        printQuoted(el); ppListString(it, _i_);
      }
    }
  }


  private static void pp(calc.Absyn.QualConst foo, int _i_)
  {
    if (foo instanceof calc.Absyn.QualConstDecl)
    {
       calc.Absyn.QualConstDecl _qualconstdecl = (calc.Absyn.QualConstDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_qualconstdecl.id_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.QualConstDecls)
    {
       calc.Absyn.QualConstDecls _qualconstdecls = (calc.Absyn.QualConstDecls) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_qualconstdecls.listid_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.ListId foo, int _i_)
  {
    ppListId(foo.iterator(), _i_);
  }

  private static void ppListId(java.util.Iterator<String> it, int _i_)
  {
    if (it.hasNext())
    {
      String el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render("::"); ppListId(it, _i_);
      }
    }
  }


  private static void pp(calc.Absyn.Type foo, int _i_)
  {
    if (foo instanceof calc.Absyn.CharType)
    {
       calc.Absyn.CharType _chartype = (calc.Absyn.CharType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("char");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.BoolType)
    {
       calc.Absyn.BoolType _booltype = (calc.Absyn.BoolType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bool");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.DoubleType)
    {
       calc.Absyn.DoubleType _doubletype = (calc.Absyn.DoubleType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("double");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.IntType)
    {
       calc.Absyn.IntType _inttype = (calc.Absyn.IntType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("int");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.VoidType)
    {
       calc.Absyn.VoidType _voidtype = (calc.Absyn.VoidType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("void");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.QualConstType)
    {
       calc.Absyn.QualConstType _qualconsttype = (calc.Absyn.QualConstType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_qualconsttype.qualconst_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.GenType foo, int _i_)
  {
    if (foo instanceof calc.Absyn.GenTypeDecl)
    {
       calc.Absyn.GenTypeDecl _gentypedecl = (calc.Absyn.GenTypeDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_gentypedecl.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.ConstGenType)
    {
       calc.Absyn.ConstGenType _constgentype = (calc.Absyn.ConstGenType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("const");
       pp(_constgentype.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.AndGenType)
    {
       calc.Absyn.AndGenType _andgentype = (calc.Absyn.AndGenType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_andgentype.type_, 0);
       render("&");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.CAndGenType)
    {
       calc.Absyn.CAndGenType _candgentype = (calc.Absyn.CAndGenType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("const");
       pp(_candgentype.type_, 0);
       render("&");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.Init foo, int _i_)
  {
    if (foo instanceof calc.Absyn.InitDecl)
    {
       calc.Absyn.InitDecl _initdecl = (calc.Absyn.InitDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_initdecl.id_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof calc.Absyn.InitAssign)
    {
       calc.Absyn.InitAssign _initassign = (calc.Absyn.InitAssign) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_initassign.id_, 0);
       render("=");
       pp(_initassign.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(calc.Absyn.ListInit foo, int _i_)
  {
    ppListInit(foo.iterator(), _i_);
  }

  private static void ppListInit(java.util.Iterator<calc.Absyn.Init> it, int _i_)
  {
    if (it.hasNext())
    {
      calc.Absyn.Init el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListInit(it, _i_);
      }
    }
  }



  private static void sh(calc.Absyn.Program foo)
  {
    if (foo instanceof calc.Absyn.ProgDef)
    {
       calc.Absyn.ProgDef _progdef = (calc.Absyn.ProgDef) foo;
       render("(");
       render("ProgDef");
       render("[");
       sh(_progdef.listdef_);
       render("]");
       render(")");
    }
  }

  private static void sh(calc.Absyn.Def foo)
  {
    if (foo instanceof calc.Absyn.QualConstDef)
    {
       calc.Absyn.QualConstDef _qualconstdef = (calc.Absyn.QualConstDef) foo;
       render("(");
       render("QualConstDef");
       sh(_qualconstdef.qualconst_);
       render(")");
    }
    if (foo instanceof calc.Absyn.FuncDef)
    {
       calc.Absyn.FuncDef _funcdef = (calc.Absyn.FuncDef) foo;
       render("(");
       render("FuncDef");
       sh(_funcdef.type_);
       sh(_funcdef.id_);
       render("[");
       sh(_funcdef.listarg_);
       render("]");
       render("[");
       sh(_funcdef.liststm_);
       render("]");
       render(")");
    }
  }

  private static void sh(calc.Absyn.ListDef foo)
  {
     for (java.util.Iterator<calc.Absyn.Def> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(calc.Absyn.ListArg foo)
  {
     for (java.util.Iterator<calc.Absyn.Arg> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(calc.Absyn.Arg foo)
  {
    if (foo instanceof calc.Absyn.ArgDecl)
    {
       calc.Absyn.ArgDecl _argdecl = (calc.Absyn.ArgDecl) foo;
       render("(");
       render("ArgDecl");
       sh(_argdecl.type_);
       sh(_argdecl.id_);
       render(")");
    }
  }

  private static void sh(calc.Absyn.Stm foo)
  {
    if (foo instanceof calc.Absyn.InitStm)
    {
       calc.Absyn.InitStm _initstm = (calc.Absyn.InitStm) foo;
       render("(");
       render("InitStm");
       sh(_initstm.gentype_);
       render("[");
       sh(_initstm.listinit_);
       render("]");
       render(")");
    }
    if (foo instanceof calc.Absyn.StmDef)
    {
       calc.Absyn.StmDef _stmdef = (calc.Absyn.StmDef) foo;
       render("(");
       render("StmDef");
       sh(_stmdef.exp_);
       render(")");
    }
    if (foo instanceof calc.Absyn.ReturnStm)
    {
       calc.Absyn.ReturnStm _returnstm = (calc.Absyn.ReturnStm) foo;
       render("(");
       render("ReturnStm");
       sh(_returnstm.stm_);
       render(")");
    }
    if (foo instanceof calc.Absyn.WhileStm)
    {
       calc.Absyn.WhileStm _whilestm = (calc.Absyn.WhileStm) foo;
       render("(");
       render("WhileStm");
       sh(_whilestm.exp_);
       sh(_whilestm.stm_);
       render(")");
    }
    if (foo instanceof calc.Absyn.IfStm)
    {
       calc.Absyn.IfStm _ifstm = (calc.Absyn.IfStm) foo;
       render("(");
       render("IfStm");
       sh(_ifstm.exp_);
       sh(_ifstm.stm_);
       render(")");
    }
    if (foo instanceof calc.Absyn.IfElseStm)
    {
       calc.Absyn.IfElseStm _ifelsestm = (calc.Absyn.IfElseStm) foo;
       render("(");
       render("IfElseStm");
       sh(_ifelsestm.exp_);
       sh(_ifelsestm.stm_1);
       sh(_ifelsestm.stm_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.BlockStm)
    {
       calc.Absyn.BlockStm _blockstm = (calc.Absyn.BlockStm) foo;
       render("(");
       render("BlockStm");
       render("[");
       sh(_blockstm.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof calc.Absyn.TypeDefStm)
    {
       calc.Absyn.TypeDefStm _typedefstm = (calc.Absyn.TypeDefStm) foo;
       render("(");
       render("TypeDefStm");
       sh(_typedefstm.gentype_);
       sh(_typedefstm.id_);
       render(")");
    }
  }

  private static void sh(calc.Absyn.ListStm foo)
  {
     for (java.util.Iterator<calc.Absyn.Stm> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(calc.Absyn.Exp foo)
  {
    if (foo instanceof calc.Absyn.AssignExp)
    {
       calc.Absyn.AssignExp _assignexp = (calc.Absyn.AssignExp) foo;
       render("(");
       render("AssignExp");
       sh(_assignexp.exp_1);
       sh(_assignexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.IncrExp)
    {
       calc.Absyn.IncrExp _increxp = (calc.Absyn.IncrExp) foo;
       render("(");
       render("IncrExp");
       sh(_increxp.exp_1);
       sh(_increxp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.DecrExp)
    {
       calc.Absyn.DecrExp _decrexp = (calc.Absyn.DecrExp) foo;
       render("(");
       render("DecrExp");
       sh(_decrexp.exp_1);
       sh(_decrexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.CondExp)
    {
       calc.Absyn.CondExp _condexp = (calc.Absyn.CondExp) foo;
       render("(");
       render("CondExp");
       sh(_condexp.exp_1);
       sh(_condexp.exp_2);
       sh(_condexp.exp_3);
       render(")");
    }
    if (foo instanceof calc.Absyn.EqExp)
    {
       calc.Absyn.EqExp _eqexp = (calc.Absyn.EqExp) foo;
       render("(");
       render("EqExp");
       sh(_eqexp.exp_1);
       sh(_eqexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.InEqExp)
    {
       calc.Absyn.InEqExp _ineqexp = (calc.Absyn.InEqExp) foo;
       render("(");
       render("InEqExp");
       sh(_ineqexp.exp_1);
       sh(_ineqexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.LShift)
    {
       calc.Absyn.LShift _lshift = (calc.Absyn.LShift) foo;
       render("(");
       render("LShift");
       sh(_lshift.exp_1);
       sh(_lshift.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.RShift)
    {
       calc.Absyn.RShift _rshift = (calc.Absyn.RShift) foo;
       render("(");
       render("RShift");
       sh(_rshift.exp_1);
       sh(_rshift.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.AddExp)
    {
       calc.Absyn.AddExp _addexp = (calc.Absyn.AddExp) foo;
       render("(");
       render("AddExp");
       sh(_addexp.exp_1);
       sh(_addexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.MinExp)
    {
       calc.Absyn.MinExp _minexp = (calc.Absyn.MinExp) foo;
       render("(");
       render("MinExp");
       sh(_minexp.exp_1);
       sh(_minexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.MulExp)
    {
       calc.Absyn.MulExp _mulexp = (calc.Absyn.MulExp) foo;
       render("(");
       render("MulExp");
       sh(_mulexp.exp_1);
       sh(_mulexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.DivExp)
    {
       calc.Absyn.DivExp _divexp = (calc.Absyn.DivExp) foo;
       render("(");
       render("DivExp");
       sh(_divexp.exp_1);
       sh(_divexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.ModExp)
    {
       calc.Absyn.ModExp _modexp = (calc.Absyn.ModExp) foo;
       render("(");
       render("ModExp");
       sh(_modexp.exp_1);
       sh(_modexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.IndexExp)
    {
       calc.Absyn.IndexExp _indexexp = (calc.Absyn.IndexExp) foo;
       render("(");
       render("IndexExp");
       sh(_indexexp.exp_1);
       sh(_indexexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.FunCallExp)
    {
       calc.Absyn.FunCallExp _funcallexp = (calc.Absyn.FunCallExp) foo;
       render("(");
       render("FunCallExp");
       sh(_funcallexp.exp_);
       render("[");
       sh(_funcallexp.listexp_);
       render("]");
       render(")");
    }
    if (foo instanceof calc.Absyn.DotStrucProjExp)
    {
       calc.Absyn.DotStrucProjExp _dotstrucprojexp = (calc.Absyn.DotStrucProjExp) foo;
       render("(");
       render("DotStrucProjExp");
       sh(_dotstrucprojexp.exp_1);
       sh(_dotstrucprojexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.ArrStrucProjExp)
    {
       calc.Absyn.ArrStrucProjExp _arrstrucprojexp = (calc.Absyn.ArrStrucProjExp) foo;
       render("(");
       render("ArrStrucProjExp");
       sh(_arrstrucprojexp.exp_1);
       sh(_arrstrucprojexp.exp_2);
       render(")");
    }
    if (foo instanceof calc.Absyn.IntExp)
    {
       calc.Absyn.IntExp _intexp = (calc.Absyn.IntExp) foo;
       render("(");
       render("IntExp");
       sh(_intexp.integer_);
       render(")");
    }
    if (foo instanceof calc.Absyn.DoubleExp)
    {
       calc.Absyn.DoubleExp _doubleexp = (calc.Absyn.DoubleExp) foo;
       render("(");
       render("DoubleExp");
       sh(_doubleexp.double_);
       render(")");
    }
    if (foo instanceof calc.Absyn.StringArrExp)
    {
       calc.Absyn.StringArrExp _stringarrexp = (calc.Absyn.StringArrExp) foo;
       render("(");
       render("StringArrExp");
       render("[");
       sh(_stringarrexp.liststring_);
       render("]");
       render(")");
    }
    if (foo instanceof calc.Absyn.CharExp)
    {
       calc.Absyn.CharExp _charexp = (calc.Absyn.CharExp) foo;
       render("(");
       render("CharExp");
       sh(_charexp.char_);
       render(")");
    }
    if (foo instanceof calc.Absyn.QualConstExp)
    {
       calc.Absyn.QualConstExp _qualconstexp = (calc.Absyn.QualConstExp) foo;
       render("(");
       render("QualConstExp");
       sh(_qualconstexp.qualconst_);
       render(")");
    }
  }

  private static void sh(calc.Absyn.ListExp foo)
  {
     for (java.util.Iterator<calc.Absyn.Exp> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(calc.Absyn.ListString foo)
  {
     for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(calc.Absyn.QualConst foo)
  {
    if (foo instanceof calc.Absyn.QualConstDecl)
    {
       calc.Absyn.QualConstDecl _qualconstdecl = (calc.Absyn.QualConstDecl) foo;
       render("(");
       render("QualConstDecl");
       sh(_qualconstdecl.id_);
       render(")");
    }
    if (foo instanceof calc.Absyn.QualConstDecls)
    {
       calc.Absyn.QualConstDecls _qualconstdecls = (calc.Absyn.QualConstDecls) foo;
       render("(");
       render("QualConstDecls");
       render("[");
       sh(_qualconstdecls.listid_);
       render("]");
       render(")");
    }
  }

  private static void sh(calc.Absyn.ListId foo)
  {
     for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(calc.Absyn.Type foo)
  {
    if (foo instanceof calc.Absyn.CharType)
    {
       calc.Absyn.CharType _chartype = (calc.Absyn.CharType) foo;
       render("CharType");
    }
    if (foo instanceof calc.Absyn.BoolType)
    {
       calc.Absyn.BoolType _booltype = (calc.Absyn.BoolType) foo;
       render("BoolType");
    }
    if (foo instanceof calc.Absyn.DoubleType)
    {
       calc.Absyn.DoubleType _doubletype = (calc.Absyn.DoubleType) foo;
       render("DoubleType");
    }
    if (foo instanceof calc.Absyn.IntType)
    {
       calc.Absyn.IntType _inttype = (calc.Absyn.IntType) foo;
       render("IntType");
    }
    if (foo instanceof calc.Absyn.VoidType)
    {
       calc.Absyn.VoidType _voidtype = (calc.Absyn.VoidType) foo;
       render("VoidType");
    }
    if (foo instanceof calc.Absyn.QualConstType)
    {
       calc.Absyn.QualConstType _qualconsttype = (calc.Absyn.QualConstType) foo;
       render("(");
       render("QualConstType");
       sh(_qualconsttype.qualconst_);
       render(")");
    }
  }

  private static void sh(calc.Absyn.GenType foo)
  {
    if (foo instanceof calc.Absyn.GenTypeDecl)
    {
       calc.Absyn.GenTypeDecl _gentypedecl = (calc.Absyn.GenTypeDecl) foo;
       render("(");
       render("GenTypeDecl");
       sh(_gentypedecl.type_);
       render(")");
    }
    if (foo instanceof calc.Absyn.ConstGenType)
    {
       calc.Absyn.ConstGenType _constgentype = (calc.Absyn.ConstGenType) foo;
       render("(");
       render("ConstGenType");
       sh(_constgentype.type_);
       render(")");
    }
    if (foo instanceof calc.Absyn.AndGenType)
    {
       calc.Absyn.AndGenType _andgentype = (calc.Absyn.AndGenType) foo;
       render("(");
       render("AndGenType");
       sh(_andgentype.type_);
       render(")");
    }
    if (foo instanceof calc.Absyn.CAndGenType)
    {
       calc.Absyn.CAndGenType _candgentype = (calc.Absyn.CAndGenType) foo;
       render("(");
       render("CAndGenType");
       sh(_candgentype.type_);
       render(")");
    }
  }

  private static void sh(calc.Absyn.Init foo)
  {
    if (foo instanceof calc.Absyn.InitDecl)
    {
       calc.Absyn.InitDecl _initdecl = (calc.Absyn.InitDecl) foo;
       render("(");
       render("InitDecl");
       sh(_initdecl.id_);
       render(")");
    }
    if (foo instanceof calc.Absyn.InitAssign)
    {
       calc.Absyn.InitAssign _initassign = (calc.Absyn.InitAssign) foo;
       render("(");
       render("InitAssign");
       sh(_initassign.id_);
       sh(_initassign.exp_);
       render(")");
    }
  }

  private static void sh(calc.Absyn.ListInit foo)
  {
     for (java.util.Iterator<calc.Absyn.Init> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + c.toString() + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + c.toString() + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + s + "\""); }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}

