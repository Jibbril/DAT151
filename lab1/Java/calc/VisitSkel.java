// File generated by the BNF Converter (bnfc 2.9.3).

package calc;

/*** Visitor Design Pattern Skeleton. ***/

/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use.
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class ProgramVisitor<R,A> implements calc.Absyn.Program.Visitor<R,A>
  {
    public R visit(calc.Absyn.ProgDef p, A arg)
    { /* Code for ProgDef goes here */
      for (calc.Absyn.Def x: p.listdef_) {
        x.accept(new DefVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class DefVisitor<R,A> implements calc.Absyn.Def.Visitor<R,A>
  {
    public R visit(calc.Absyn.QualConstDef p, A arg)
    { /* Code for QualConstDef goes here */
      p.qualconst_.accept(new QualConstVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.FuncDef p, A arg)
    { /* Code for FuncDef goes here */
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      //p.id_;
      for (calc.Absyn.Arg x: p.listarg_) {
        x.accept(new ArgVisitor<R,A>(), arg);
      }
      for (calc.Absyn.Stm x: p.liststm_) {
        x.accept(new StmVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class ArgVisitor<R,A> implements calc.Absyn.Arg.Visitor<R,A>
  {
    public R visit(calc.Absyn.ArgDecl p, A arg)
    { /* Code for ArgDecl goes here */
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      //p.id_;
      return null;
    }
  }
  public class StmVisitor<R,A> implements calc.Absyn.Stm.Visitor<R,A>
  {
    public R visit(calc.Absyn.InitStm p, A arg)
    { /* Code for InitStm goes here */
      p.gentype_.accept(new GenTypeVisitor<R,A>(), arg);
      for (calc.Absyn.Init x: p.listinit_) {
        x.accept(new InitVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(calc.Absyn.StmDef p, A arg)
    { /* Code for StmDef goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.ReturnStm p, A arg)
    { /* Code for ReturnStm goes here */
      p.stm_.accept(new StmVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.WhileStm p, A arg)
    { /* Code for WhileStm goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      p.stm_.accept(new StmVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.IfStm p, A arg)
    { /* Code for IfStm goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      p.stm_.accept(new StmVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.IfElseStm p, A arg)
    { /* Code for IfElseStm goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      p.stm_1.accept(new StmVisitor<R,A>(), arg);
      p.stm_2.accept(new StmVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.BlockStm p, A arg)
    { /* Code for BlockStm goes here */
      for (calc.Absyn.Stm x: p.liststm_) {
        x.accept(new StmVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(calc.Absyn.TypeDefStm p, A arg)
    { /* Code for TypeDefStm goes here */
      p.gentype_.accept(new GenTypeVisitor<R,A>(), arg);
      //p.id_;
      return null;
    }
  }
  public class ExpVisitor<R,A> implements calc.Absyn.Exp.Visitor<R,A>
  {
    public R visit(calc.Absyn.AssignExp p, A arg)
    { /* Code for AssignExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.IncrExp p, A arg)
    { /* Code for IncrExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.DecrExp p, A arg)
    { /* Code for DecrExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.CondExp p, A arg)
    { /* Code for CondExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      p.exp_3.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.EqExp p, A arg)
    { /* Code for EqExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.InEqExp p, A arg)
    { /* Code for InEqExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.LShift p, A arg)
    { /* Code for LShift goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.RShift p, A arg)
    { /* Code for RShift goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.AddExp p, A arg)
    { /* Code for AddExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.MinExp p, A arg)
    { /* Code for MinExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.MulExp p, A arg)
    { /* Code for MulExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.DivExp p, A arg)
    { /* Code for DivExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.ModExp p, A arg)
    { /* Code for ModExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.IndexExp p, A arg)
    { /* Code for IndexExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.FunCallExp p, A arg)
    { /* Code for FunCallExp goes here */
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      for (calc.Absyn.Exp x: p.listexp_) {
        x.accept(new ExpVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(calc.Absyn.DotStrucProjExp p, A arg)
    { /* Code for DotStrucProjExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.ArrStrucProjExp p, A arg)
    { /* Code for ArrStrucProjExp goes here */
      p.exp_1.accept(new ExpVisitor<R,A>(), arg);
      p.exp_2.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.IntExp p, A arg)
    { /* Code for IntExp goes here */
      //p.integer_;
      return null;
    }
    public R visit(calc.Absyn.DoubleExp p, A arg)
    { /* Code for DoubleExp goes here */
      //p.double_;
      return null;
    }
    public R visit(calc.Absyn.StringArrExp p, A arg)
    { /* Code for StringArrExp goes here */
      for (String x: p.liststring_) {
        //x;
      }
      return null;
    }
    public R visit(calc.Absyn.CharExp p, A arg)
    { /* Code for CharExp goes here */
      //p.char_;
      return null;
    }
    public R visit(calc.Absyn.QualConstExp p, A arg)
    { /* Code for QualConstExp goes here */
      p.qualconst_.accept(new QualConstVisitor<R,A>(), arg);
      return null;
    }
  }
  public class QualConstVisitor<R,A> implements calc.Absyn.QualConst.Visitor<R,A>
  {
    public R visit(calc.Absyn.QualConstDecl p, A arg)
    { /* Code for QualConstDecl goes here */
      //p.id_;
      return null;
    }
    public R visit(calc.Absyn.QualConstDecls p, A arg)
    { /* Code for QualConstDecls goes here */
      for (String x: p.listid_) {
        //x;
      }
      return null;
    }
  }
  public class TypeVisitor<R,A> implements calc.Absyn.Type.Visitor<R,A>
  {
    public R visit(calc.Absyn.CharType p, A arg)
    { /* Code for CharType goes here */
      return null;
    }
    public R visit(calc.Absyn.BoolType p, A arg)
    { /* Code for BoolType goes here */
      return null;
    }
    public R visit(calc.Absyn.DoubleType p, A arg)
    { /* Code for DoubleType goes here */
      return null;
    }
    public R visit(calc.Absyn.IntType p, A arg)
    { /* Code for IntType goes here */
      return null;
    }
    public R visit(calc.Absyn.VoidType p, A arg)
    { /* Code for VoidType goes here */
      return null;
    }
    public R visit(calc.Absyn.QualConstType p, A arg)
    { /* Code for QualConstType goes here */
      p.qualconst_.accept(new QualConstVisitor<R,A>(), arg);
      return null;
    }
  }
  public class GenTypeVisitor<R,A> implements calc.Absyn.GenType.Visitor<R,A>
  {
    public R visit(calc.Absyn.GenTypeDecl p, A arg)
    { /* Code for GenTypeDecl goes here */
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.ConstGenType p, A arg)
    { /* Code for ConstGenType goes here */
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.AndGenType p, A arg)
    { /* Code for AndGenType goes here */
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(calc.Absyn.CAndGenType p, A arg)
    { /* Code for CAndGenType goes here */
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class InitVisitor<R,A> implements calc.Absyn.Init.Visitor<R,A>
  {
    public R visit(calc.Absyn.InitDecl p, A arg)
    { /* Code for InitDecl goes here */
      //p.id_;
      return null;
    }
    public R visit(calc.Absyn.InitAssign p, A arg)
    { /* Code for InitAssign goes here */
      //p.id_;
      p.exp_.accept(new ExpVisitor<R,A>(), arg);
      return null;
    }
  }
}
