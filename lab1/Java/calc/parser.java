
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package calc;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\002\000\002\005\003\000\002\005\005\000" +
    "\002\006\004\000\002\007\005\000\002\007\004\000\002" +
    "\007\004\000\002\007\007\000\002\007\007\000\002\007" +
    "\011\000\002\007\005\000\002\007\006\000\002\010\002" +
    "\000\002\010\004\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\007\000\002\011\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\016\006\000\002\016\006\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\005\000\002\020\002\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\021\004\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\003\000\002\025\004\000\002\025\004\000\002\025" +
    "\005\000\002\026\003\000\002\026\005\000\002\027\003" +
    "\000\002\027\005\000\002\030\003\000\002\031\003\000" +
    "\002\032\003\000\002\033\003\000\002\034\003\000\002" +
    "\035\003\000\002\036\003\000\002\037\003\000\002\040" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\022\002\ufffd\036\ufffd\037\ufffd\041\ufffd\044" +
    "\ufffd\047\ufffd\050\ufffd\056\ufffd\001\002\000\004\002\213" +
    "\001\002\000\022\002\000\036\012\037\011\041\010\044" +
    "\007\047\017\050\016\056\014\001\002\000\004\056\026" +
    "\001\002\000\006\035\uffc4\056\uffc4\001\002\000\006\035" +
    "\uffc5\056\uffc5\001\002\000\006\035\uffc7\056\uffc7\001\002" +
    "\000\006\035\uffc6\056\uffc6\001\002\000\022\002\ufffc\036" +
    "\ufffc\037\ufffc\041\ufffc\044\ufffc\047\ufffc\050\ufffc\056\ufffc" +
    "\001\002\000\064\004\uffcb\005\uffcb\006\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\023\035\uffcb" +
    "\056\uffcb\001\002\000\062\004\uffca\005\uffca\006\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\035\uffca" +
    "\056\uffca\001\002\000\006\035\uffc3\056\uffc3\001\002\000" +
    "\004\056\014\001\002\000\006\035\uffc2\056\uffc2\001\002" +
    "\000\004\004\022\001\002\000\022\002\uffff\036\uffff\037" +
    "\uffff\041\uffff\044\uffff\047\uffff\050\uffff\056\uffff\001\002" +
    "\000\004\056\024\001\002\000\064\004\uffc9\005\uffc9\006" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\023\035\uffc9\056\uffc9\001\002\000\062\004\uffc8\005" +
    "\uffc8\006\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\035\uffc8\056\uffc8\001\002\000\004\005\027\001" +
    "\002\000\020\006\ufffb\036\012\037\011\041\010\044\007" +
    "\050\016\056\014\001\002\000\004\056\212\001\002\000" +
    "\004\006\035\001\002\000\006\006\ufffa\011\033\001\002" +
    "\000\020\006\ufffb\036\012\037\011\041\010\044\007\050" +
    "\016\056\014\001\002\000\004\006\ufff9\001\002\000\004" +
    "\007\036\001\002\000\046\005\uffef\007\uffef\010\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef\045\uffef" +
    "\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\001\002\000\046\005\043\007\042\010\041" +
    "\036\012\037\011\040\067\041\010\043\064\044\007\045" +
    "\063\046\062\050\016\051\057\052\051\053\100\054\044" +
    "\055\074\056\014\001\002\000\004\056\202\001\002\000" +
    "\022\002\ufffe\036\ufffe\037\ufffe\041\ufffe\044\ufffe\047\ufffe" +
    "\050\ufffe\056\ufffe\001\002\000\046\005\uffef\007\uffef\010" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\001\002\000\016\005\043\052\051" +
    "\053\100\054\044\055\074\056\014\001\002\000\056\004" +
    "\uffd6\005\uffd6\006\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\001\002\000\030\004\uffe6\006\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\031\uffe6\001\002\000\030\004\uffb3\006\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\173" +
    "\020\172\031\uffb3\001\002\000\024\004\uffb4\006\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\031\uffb4" +
    "\001\002\000\024\004\uffb5\006\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\031\uffb5\001\002\000\060" +
    "\004\uffcd\005\uffcd\006\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\052\051\001\002\000\024\004\uffb6" +
    "\006\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\031\uffb6\001\002\000\024\004\uffb7\006\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\031\uffb7\001" +
    "\002\000\022\004\uffe9\006\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\031\uffe9\001\002\000\022\004\uffb8\006" +
    "\uffb8\011\uffb8\012\162\013\161\014\160\015\157\031\uffb8" +
    "\001\002\000\012\004\uffb9\006\uffb9\011\uffb9\031\uffb9\001" +
    "\002\000\004\005\153\001\002\000\046\005\uffee\007\uffee" +
    "\010\uffee\036\uffee\037\uffee\040\uffee\041\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\001\002\000\052\004\uffd2\005" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\032\uffd2\033\uffd2\035\uffc2\056\uffc2\001\002" +
    "\000\020\036\012\037\011\040\067\041\010\044\007\050" +
    "\016\056\014\001\002\000\044\005\043\007\042\036\012" +
    "\037\011\040\067\041\010\043\064\044\007\045\063\046" +
    "\062\050\016\051\057\052\051\053\100\054\044\055\074" +
    "\056\014\001\002\000\004\005\141\001\002\000\056\004" +
    "\uffd4\005\uffd4\006\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\001\002\000\004\004\140\001\002\000" +
    "\016\036\012\037\011\041\010\044\007\050\016\056\014" +
    "\001\002\000\056\004\uffd7\005\uffd7\006\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\001\002\000\006" +
    "\035\135\056\uffc1\001\002\000\056\004\uffb1\005\122\006" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\121\031\uffb1\032\120\033\123" +
    "\001\002\000\046\004\uffdc\006\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031" +
    "\uffdc\001\002\000\056\004\uffd5\005\uffd5\006\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\001\002\000" +
    "\046\004\uffe0\006\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\112\026\111\027\110\031\uffe0\001\002" +
    "\000\040\004\uffe3\006\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\106\024\105\031\uffe3\001\002\000\034\004\uffb2\006" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\102\022\101\031\uffb2\001\002\000" +
    "\056\004\uffd3\005\uffd3\006\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\001\002\000\016\005\043\052" +
    "\051\053\100\054\044\055\074\056\014\001\002\000\016" +
    "\005\043\052\051\053\100\054\044\055\074\056\014\001" +
    "\002\000\040\004\uffe5\006\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\106\024\105\031\uffe5\001\002\000\056\004\uffd2" +
    "\005\uffd2\006\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\001\002\000\016\005\043\052\051\053\100" +
    "\054\044\055\074\056\014\001\002\000\016\005\043\052" +
    "\051\053\100\054\044\055\074\056\014\001\002\000\046" +
    "\004\uffe2\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\112\026\111\027\110\031\uffe2\001\002\000" +
    "\016\005\043\052\051\053\100\054\044\055\074\056\014" +
    "\001\002\000\016\005\043\052\051\053\100\054\044\055" +
    "\074\056\014\001\002\000\016\005\043\052\051\053\100" +
    "\054\044\055\074\056\014\001\002\000\046\004\uffdf\006" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\031\uffdf\001\002\000\046\004\uffde" +
    "\006\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\031\uffde\001\002\000\046\004" +
    "\uffdd\006\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\001\002\000\046" +
    "\004\uffe1\006\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\112\026\111\027\110\031\uffe1\001\002\000" +
    "\040\004\uffe4\006\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\106\024\105\031\uffe4\001\002\000\016\005\043\052\051" +
    "\053\100\054\044\055\074\056\014\001\002\000\016\005" +
    "\043\052\051\053\100\054\044\055\074\056\014\001\002" +
    "\000\020\005\043\006\uffd0\052\051\053\100\054\044\055" +
    "\074\056\014\001\002\000\016\005\043\052\051\053\100" +
    "\054\044\055\074\056\014\001\002\000\056\004\uffd8\005" +
    "\uffd8\006\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\001\002\000\004\006\131\001\002\000\006\006" +
    "\uffcf\011\127\001\002\000\020\005\043\006\uffd0\052\051" +
    "\053\100\054\044\055\074\056\014\001\002\000\004\006" +
    "\uffce\001\002\000\056\004\uffda\005\uffda\006\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\001\002\000" +
    "\004\031\133\001\002\000\056\004\uffdb\005\uffdb\006\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\001" +
    "\002\000\056\004\uffd9\005\uffd9\006\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\001\002\000\004\056" +
    "\uffbf\001\002\000\006\035\137\056\uffc0\001\002\000\004" +
    "\056\uffbe\001\002\000\050\005\ufff6\007\ufff6\010\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\001\002\000\016\005\043\052\051" +
    "\053\100\054\044\055\074\056\014\001\002\000\004\006" +
    "\143\001\002\000\044\005\043\007\042\036\012\037\011" +
    "\040\067\041\010\043\064\044\007\045\063\046\062\050" +
    "\016\051\057\052\051\053\100\054\044\055\074\056\014" +
    "\001\002\000\050\005\ufff3\007\ufff3\010\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\145\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\001\002\000\044\005\043\007\042\036\012" +
    "\037\011\040\067\041\010\043\064\044\007\045\063\046" +
    "\062\050\016\051\057\052\051\053\100\054\044\055\074" +
    "\056\014\001\002\000\050\005\ufff2\007\ufff2\010\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\001\002\000\050\005\ufff5\007\ufff5" +
    "\010\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\004\056" +
    "\151\001\002\000\004\004\152\001\002\000\050\005\ufff0" +
    "\007\ufff0\010\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000" +
    "\016\005\043\052\051\053\100\054\044\055\074\056\014" +
    "\001\002\000\004\006\155\001\002\000\044\005\043\007" +
    "\042\036\012\037\011\040\067\041\010\043\064\044\007" +
    "\045\063\046\062\050\016\051\057\052\051\053\100\054" +
    "\044\055\074\056\014\001\002\000\050\005\ufff4\007\ufff4" +
    "\010\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000\016\005" +
    "\043\052\051\053\100\054\044\055\074\056\014\001\002" +
    "\000\016\005\043\052\051\053\100\054\044\055\074\056" +
    "\014\001\002\000\016\005\043\052\051\053\100\054\044" +
    "\055\074\056\014\001\002\000\016\005\043\052\051\053" +
    "\100\054\044\055\074\056\014\001\002\000\022\004\uffed" +
    "\006\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\031" +
    "\uffed\001\002\000\022\004\uffec\006\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\031\uffec\001\002\000\022\004" +
    "\uffeb\006\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\031\uffeb\001\002\000\004\016\167\001\002\000\016\005" +
    "\043\052\051\053\100\054\044\055\074\056\014\001\002" +
    "\000\022\004\uffea\006\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\031\uffea\001\002\000\056\004\uffcc\005\uffcc" +
    "\006\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\001\002\000\016\005\043\052\051\053\100\054\044" +
    "\055\074\056\014\001\002\000\016\005\043\052\051\053" +
    "\100\054\044\055\074\056\014\001\002\000\030\004\uffe8" +
    "\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\031\uffe8\001\002\000\030\004\uffe7" +
    "\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\031\uffe7\001\002\000\004\006\177" +
    "\001\002\000\056\004\uffd1\005\uffd1\006\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\001\002\000\046" +
    "\005\043\007\042\010\201\036\012\037\011\040\067\041" +
    "\010\043\064\044\007\045\063\046\062\050\016\051\057" +
    "\052\051\053\100\054\044\055\074\056\014\001\002\000" +
    "\050\005\ufff1\007\ufff1\010\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\001\002\000\010\004\uffbd\011\uffbd\012\210\001\002\000" +
    "\006\004\uffbb\011\206\001\002\000\004\004\205\001\002" +
    "\000\050\005\ufff7\007\ufff7\010\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\001\002\000\004\056\202\001\002\000\004\004\uffba" +
    "\001\002\000\016\005\043\052\051\053\100\054\044\055" +
    "\074\056\014\001\002\000\006\004\uffbc\011\uffbc\001\002" +
    "\000\006\006\ufff8\011\ufff8\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\012\003\012\022\017\023\014\024\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\020\023\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\030" +
    "\006\031\022\017\023\014\024\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\033" +
    "\006\031\022\017\023\014\024\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\036\001\001\000\056" +
    "\007\057\011\054\012\045\013\076\014\075\015\074\016" +
    "\071\017\067\021\064\022\060\023\014\024\070\025\037" +
    "\030\065\031\055\032\053\033\052\034\051\035\047\036" +
    "\046\037\044\040\072\001\001\000\006\026\202\027\203" +
    "\001\001\000\002\001\001\000\004\010\177\001\001\000" +
    "\050\011\054\012\045\013\076\014\075\015\074\016\071" +
    "\017\067\021\064\022\103\023\014\030\175\031\055\032" +
    "\053\033\052\034\051\035\047\036\046\037\044\040\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\017\023" +
    "\014\024\070\025\147\001\001\000\056\007\146\011\054" +
    "\012\045\013\076\014\075\015\074\016\071\017\067\021" +
    "\064\022\060\023\014\024\070\025\037\030\065\031\055" +
    "\032\053\033\052\034\051\035\047\036\046\037\044\040" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\017\023\014\024\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\116" +
    "\015\074\016\071\017\067\021\064\022\103\023\014\040" +
    "\072\001\001\000\022\014\102\015\074\016\071\017\067" +
    "\021\064\022\103\023\014\040\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\115\016\071\017\067" +
    "\021\064\022\103\023\014\040\072\001\001\000\020\015" +
    "\106\016\071\017\067\021\064\022\103\023\014\040\072" +
    "\001\001\000\002\001\001\000\016\016\071\017\067\021" +
    "\064\022\103\023\014\040\114\001\001\000\016\016\071" +
    "\017\067\021\064\022\103\023\014\040\113\001\001\000" +
    "\016\016\071\017\067\021\064\022\103\023\014\040\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\133" +
    "\021\064\022\103\023\014\001\001\000\050\011\054\012" +
    "\045\013\076\014\075\015\074\016\071\017\067\021\064" +
    "\022\103\023\014\030\131\031\055\032\053\033\052\034" +
    "\051\035\047\036\046\037\044\040\072\001\001\000\052" +
    "\011\054\012\045\013\076\014\075\015\074\016\071\017" +
    "\067\020\124\021\064\022\103\023\014\030\125\031\055" +
    "\032\053\033\052\034\051\035\047\036\046\037\044\040" +
    "\072\001\001\000\012\017\123\021\064\022\103\023\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\011\054\012\045\013\076\014\075\015\074" +
    "\016\071\017\067\020\127\021\064\022\103\023\014\030" +
    "\125\031\055\032\053\033\052\034\051\035\047\036\046" +
    "\037\044\040\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\054\012\045\013\076\014\075" +
    "\015\074\016\071\017\067\021\064\022\103\023\014\030" +
    "\141\031\055\032\053\033\052\034\051\035\047\036\046" +
    "\037\044\040\072\001\001\000\002\001\001\000\056\007" +
    "\143\011\054\012\045\013\076\014\075\015\074\016\071" +
    "\017\067\021\064\022\060\023\014\024\070\025\037\030" +
    "\065\031\055\032\053\033\052\034\051\035\047\036\046" +
    "\037\044\040\072\001\001\000\002\001\001\000\056\007" +
    "\145\011\054\012\045\013\076\014\075\015\074\016\071" +
    "\017\067\021\064\022\060\023\014\024\070\025\037\030" +
    "\065\031\055\032\053\033\052\034\051\035\047\036\046" +
    "\037\044\040\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\054\012\045\013\076\014\075\015\074\016" +
    "\071\017\067\021\064\022\103\023\014\030\153\031\055" +
    "\032\053\033\052\034\051\035\047\036\046\037\044\040" +
    "\072\001\001\000\002\001\001\000\056\007\155\011\054" +
    "\012\045\013\076\014\075\015\074\016\071\017\067\021" +
    "\064\022\060\023\014\024\070\025\037\030\065\031\055" +
    "\032\053\033\052\034\051\035\047\036\046\037\044\040" +
    "\072\001\001\000\002\001\001\000\042\012\045\013\076" +
    "\014\075\015\074\016\071\017\067\021\064\022\103\023" +
    "\014\032\165\033\052\034\051\035\047\036\046\037\044" +
    "\040\072\001\001\000\042\012\045\013\076\014\075\015" +
    "\074\016\071\017\067\021\064\022\103\023\014\032\164" +
    "\033\052\034\051\035\047\036\046\037\044\040\072\001" +
    "\001\000\042\012\045\013\076\014\075\015\074\016\071" +
    "\017\067\021\064\022\103\023\014\032\163\033\052\034" +
    "\051\035\047\036\046\037\044\040\072\001\001\000\042" +
    "\012\045\013\076\014\075\015\074\016\071\017\067\021" +
    "\064\022\103\023\014\032\162\033\052\034\051\035\047" +
    "\036\046\037\044\040\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\012\045\013\076\014\075\015\074\016\071\017\067\021" +
    "\064\022\103\023\014\032\167\033\052\034\051\035\047" +
    "\036\046\037\044\040\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\013\076\014\075\015\074\016\071" +
    "\017\067\021\064\022\103\023\014\037\174\040\072\001" +
    "\001\000\026\013\076\014\075\015\074\016\071\017\067" +
    "\021\064\022\103\023\014\037\173\040\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\007\057\011\054\012\045\013\076\014" +
    "\075\015\074\016\071\017\067\021\064\022\060\023\014" +
    "\024\070\025\037\030\065\031\055\032\053\033\052\034" +
    "\051\035\047\036\046\037\044\040\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\202\027\206\001\001" +
    "\000\002\001\001\000\050\011\054\012\045\013\076\014" +
    "\075\015\074\016\071\017\067\021\064\022\103\023\014" +
    "\030\210\031\055\032\053\033\052\034\051\035\047\036" +
    "\046\037\044\040\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public calc.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (calc.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		calc.Absyn.Program start_val = (calc.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              calc.Absyn.Program RESULT =null;
		calc.Absyn.ListDef p_1 = (calc.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ProgDef(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Def ::= _SYMB_35 QualConst _SYMB_0 
            {
              calc.Absyn.Def RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.QualConst p_2 = (calc.Absyn.QualConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstDef(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Def ::= Type Id _SYMB_1 ListArg _SYMB_2 _SYMB_3 ListStm _SYMB_4 
            {
              calc.Absyn.Def RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		calc.Absyn.ListArg p_4 = (calc.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListStm p_7 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.FuncDef(p_1,p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListDef ::= 
            {
              calc.Absyn.ListDef RESULT =null;
		 RESULT = new calc.Absyn.ListDef(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListDef ::= ListDef Def 
            {
              calc.Absyn.ListDef RESULT =null;
		calc.Absyn.ListDef p_1 = (calc.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Def p_2 = (calc.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= 
            {
              calc.Absyn.ListArg RESULT =null;
		 RESULT = new calc.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg 
            {
              calc.Absyn.ListArg RESULT =null;
		calc.Absyn.Arg p_1 = (calc.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= Arg _SYMB_5 ListArg 
            {
              calc.Absyn.ListArg RESULT =null;
		calc.Absyn.Arg p_1 = (calc.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListArg p_3 = (calc.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Arg ::= Type Id 
            {
              calc.Absyn.Arg RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ArgDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stm ::= GenType ListInit _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.GenType p_1 = (calc.Absyn.GenType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListInit p_2 = (calc.Absyn.ListInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.InitStm(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stm ::= Exp _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDef(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stm ::= _SYMB_33 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_2 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ReturnStm(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stm ::= _SYMB_37 _SYMB_1 Exp _SYMB_2 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_5 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.WhileStm(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= _SYMB_31 _SYMB_1 Exp _SYMB_2 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_5 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IfStm(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= _SYMB_31 _SYMB_1 Exp _SYMB_2 Stm _SYMB_30 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Stm p_5 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_7 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IfElseStm(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stm ::= _SYMB_3 ListStm _SYMB_4 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListStm p_2 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.BlockStm(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stm ::= _SYMB_34 GenType Id _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.GenType p_2 = (calc.Absyn.GenType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.TypeDefStm(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListStm ::= 
            {
              calc.Absyn.ListStm RESULT =null;
		 RESULT = new calc.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListStm ::= ListStm Stm 
            {
              calc.Absyn.ListStm RESULT =null;
		calc.Absyn.ListStm p_1 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_2 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp2 ::= Exp2 _SYMB_6 Exp3 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.AssignExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp2 ::= Exp2 _SYMB_7 Exp3 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IncrExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp2 ::= Exp2 _SYMB_8 Exp3 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DecrExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp2 ::= Exp2 _SYMB_9 Exp3 _SYMB_10 Exp3 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_5 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.CondExp(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp2 ::= Exp3 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp8 ::= Exp8 _SYMB_11 Exp9 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.EqExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp8 ::= Exp8 _SYMB_12 Exp9 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.InEqExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp8 ::= Exp9 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp10 ::= Exp10 _SYMB_13 Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.LShift(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp10 ::= Exp10 _SYMB_14 Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.RShift(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp10 ::= Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp11 ::= Exp11 _SYMB_15 Exp12 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.AddExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp11 ::= Exp11 _SYMB_16 Exp12 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.MinExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp11 ::= Exp12 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp12 ::= Exp12 _SYMB_17 Exp13 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.MulExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp12 ::= Exp12 _SYMB_18 Exp13 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DivExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp12 ::= Exp12 _SYMB_19 Exp13 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ModExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp12 ::= Exp13 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp14 ::= Exp14 _SYMB_20 Exp _SYMB_21 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IndexExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp14 ::= Exp14 _SYMB_1 ListExp _SYMB_2 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListExp p_3 = (calc.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.FunCallExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp14 ::= Exp14 _SYMB_22 Exp15 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DotStrucProjExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp14 ::= Exp14 _SYMB_23 Exp15 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ArrStrucProjExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp14 ::= Exp15 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp15 ::= _INTEGER_ 
            {
              calc.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IntExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp15 ::= _DOUBLE_ 
            {
              calc.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DoubleExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp15 ::= ListString 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.ListString p_1 = (calc.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StringArrExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp15 ::= _CHAR_ 
            {
              calc.Absyn.Exp RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.CharExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp15 ::= QualConst 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.QualConst p_1 = (calc.Absyn.QualConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp15 ::= _SYMB_1 Exp _SYMB_2 
            {
              calc.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_2 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListExp ::= 
            {
              calc.Absyn.ListExp RESULT =null;
		 RESULT = new calc.Absyn.ListExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListExp ::= Exp 
            {
              calc.Absyn.ListExp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListExp ::= Exp _SYMB_5 ListExp 
            {
              calc.Absyn.ListExp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListExp p_3 = (calc.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListString ::= _STRING_ 
            {
              calc.Absyn.ListString RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListString(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListString",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListString ::= _STRING_ ListString 
            {
              calc.Absyn.ListString RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListString p_2 = (calc.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListString",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // QualConst ::= Id 
            {
              calc.Absyn.QualConst RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QualConst",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // QualConst ::= ListId 
            {
              calc.Absyn.QualConst RESULT =null;
		calc.Absyn.ListId p_1 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstDecls(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QualConst",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListId ::= Id 
            {
              calc.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListId ::= Id _SYMB_24 ListId 
            {
              calc.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListId p_3 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= _SYMB_27 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.CharType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= _SYMB_26 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= _SYMB_29 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type ::= _SYMB_32 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Type ::= _SYMB_36 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= QualConst 
            {
              calc.Absyn.Type RESULT =null;
		calc.Absyn.QualConst p_1 = (calc.Absyn.QualConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GenType ::= Type 
            {
              calc.Absyn.GenType RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.GenTypeDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GenType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GenType ::= _SYMB_28 Type 
            {
              calc.Absyn.GenType RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Type p_2 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ConstGenType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GenType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GenType ::= Type _SYMB_25 
            {
              calc.Absyn.GenType RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.AndGenType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GenType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // GenType ::= _SYMB_28 Type _SYMB_25 
            {
              calc.Absyn.GenType RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Type p_2 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.CAndGenType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GenType",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Init ::= Id 
            {
              calc.Absyn.Init RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.InitDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Init",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Init ::= Id _SYMB_6 Exp 
            {
              calc.Absyn.Init RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.InitAssign(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Init",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListInit ::= Init 
            {
              calc.Absyn.ListInit RESULT =null;
		calc.Absyn.Init p_1 = (calc.Absyn.Init)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListInit(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListInit",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListInit ::= Init _SYMB_5 ListInit 
            {
              calc.Absyn.ListInit RESULT =null;
		calc.Absyn.Init p_1 = (calc.Absyn.Init)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListInit p_3 = (calc.Absyn.ListInit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListInit",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp ::= Exp1 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp1 ::= Exp2 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp3 ::= Exp4 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp4 ::= Exp5 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp5 ::= Exp6 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp6 ::= Exp7 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp7 ::= Exp8 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp9 ::= Exp10 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp13 ::= Exp14 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",30, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
