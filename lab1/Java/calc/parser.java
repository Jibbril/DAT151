
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package calc;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\004\000\002\004\005\000\002\004\012" +
    "\000\002\005\002\000\002\005\003\000\002\005\005\000" +
    "\002\006\004\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\007\000\002\007\007\000\002\007" +
    "\004\000\002\010\002\000\002\010\004\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\013\003\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\016\003\000\002\017\003\000" +
    "\002\020\003\000\002\021\003\000\002\022\003\000\002" +
    "\023\003\000\002\024\003\000\002\025\003\000\002\026" +
    "\003\000\002\027\003\000\002\030\003\000\002\031\003" +
    "\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\016\002\uffff\016\uffff\017\uffff\020\uffff\022" +
    "\uffff\023\uffff\001\002\000\004\002\110\001\002\000\016" +
    "\002\000\016\006\017\014\020\013\022\012\023\011\001" +
    "\002\000\004\027\uffe5\001\002\000\004\027\054\001\002" +
    "\000\016\002\ufffe\016\ufffe\017\ufffe\020\ufffe\022\ufffe\023" +
    "\ufffe\001\002\000\004\027\uffe2\001\002\000\014\005\026" +
    "\024\020\025\016\026\022\027\035\001\002\000\004\027" +
    "\uffe3\001\002\000\004\027\uffe4\001\002\000\014\004\uffd7" +
    "\006\uffd7\013\uffd7\014\uffd7\027\uffd7\001\002\000\014\004" +
    "\uffec\006\uffec\013\uffec\014\uffec\027\uffec\001\002\000\014" +
    "\004\uffed\006\uffed\013\uffed\014\uffed\027\uffed\001\002\000" +
    "\014\004\uffea\006\uffea\013\uffea\014\uffea\027\uffea\001\002" +
    "\000\014\004\uffd8\006\uffd8\013\051\014\050\027\uffd8\001" +
    "\002\000\014\004\uffeb\006\uffeb\013\uffeb\014\uffeb\027\uffeb" +
    "\001\002\000\010\004\uffd9\006\uffd9\027\uffd9\001\002\000" +
    "\010\004\uffda\006\uffda\027\uffda\001\002\000\010\004\uffdb" +
    "\006\uffdb\027\uffdb\001\002\000\014\005\026\024\020\025" +
    "\016\026\022\027\035\001\002\000\010\004\uffdc\006\uffdc" +
    "\027\uffdc\001\002\000\004\004\045\001\002\000\010\004" +
    "\uffdd\006\uffdd\027\uffdd\001\002\000\010\004\uffde\006\uffde" +
    "\027\uffde\001\002\000\010\004\uffdf\006\uffdf\027\uffdf\001" +
    "\002\000\010\004\uffe0\006\uffe0\027\uffe0\001\002\000\016" +
    "\004\uffe7\006\uffe7\013\uffe7\014\uffe7\015\043\027\uffe7\001" +
    "\002\000\010\004\uffe1\006\uffe1\027\uffe1\001\002\000\014" +
    "\004\uffe9\006\uffe9\013\uffe9\014\uffe9\027\uffe9\001\002\000" +
    "\014\004\uffd4\006\uffd4\013\uffd4\014\uffd4\027\uffd4\001\002" +
    "\000\014\004\uffd5\006\uffd5\013\uffd5\014\uffd5\027\uffd5\001" +
    "\002\000\014\004\uffd6\006\uffd6\013\uffd6\014\uffd6\027\uffd6" +
    "\001\002\000\004\027\035\001\002\000\014\004\uffe6\006" +
    "\uffe6\013\uffe6\014\uffe6\027\uffe6\001\002\000\016\002\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd\001\002\000" +
    "\004\006\047\001\002\000\014\004\uffe8\006\uffe8\013\uffe8" +
    "\014\uffe8\027\uffe8\001\002\000\014\005\026\024\020\025" +
    "\016\026\022\027\035\001\002\000\014\005\026\024\020" +
    "\025\016\026\022\027\035\001\002\000\014\004\uffef\006" +
    "\uffef\013\uffef\014\uffef\027\uffef\001\002\000\014\004\uffee" +
    "\006\uffee\013\uffee\014\uffee\027\uffee\001\002\000\004\005" +
    "\055\001\002\000\014\006\ufffb\016\006\017\014\020\013" +
    "\023\011\001\002\000\004\027\107\001\002\000\006\006" +
    "\ufffa\011\105\001\002\000\004\006\061\001\002\000\004" +
    "\007\062\001\002\000\030\005\ufff1\010\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\001\002\000\030\005\026\010\067\016\006\017" +
    "\014\020\013\021\065\023\011\024\020\025\016\026\022" +
    "\027\035\001\002\000\030\005\ufff0\010\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\001\002\000\026\005\026\016\006\017\014\020" +
    "\013\021\065\023\011\024\020\025\016\026\022\027\035" +
    "\001\002\000\004\027\074\001\002\000\016\002\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\022\ufffc\023\ufffc\001\002\000\006" +
    "\004\072\027\071\001\002\000\004\004\073\001\002\000" +
    "\030\005\ufff7\010\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\001\002\000" +
    "\030\005\ufff5\010\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\001\002\000" +
    "\010\004\075\011\077\012\076\001\002\000\030\005\ufff6" +
    "\010\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\001\002\000\014\005\026" +
    "\024\020\025\016\026\022\027\035\001\002\000\004\027" +
    "\035\001\002\000\004\004\101\001\002\000\030\005\ufff4" +
    "\010\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\001\002\000\004\004\103" +
    "\001\002\000\030\005\ufff3\010\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\001\002\000\030\005\ufff2\010\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\001\002\000\014\006\ufffb\016\006\017\014\020\013\023" +
    "\011\001\002\000\004\006\ufff9\001\002\000\006\006\ufff8" +
    "\011\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\007\014\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\020\012\037\013\036\015\027\016\035\017\033" +
    "\020\032\021\031\022\030\023\026\024\024\025\023\026" +
    "\022\027\016\030\014\031\041\032\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\020\012\037\013\036\015\045" +
    "\016\035\017\033\020\032\021\031\022\030\023\026\024" +
    "\024\025\023\026\022\027\016\030\014\031\041\032\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\037\013\036" +
    "\027\052\030\014\031\041\032\040\001\001\000\016\012" +
    "\037\013\036\027\051\030\014\031\041\032\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\057\006\056\014\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\062\001\001\000\050\007\063\011\020\012\037" +
    "\013\036\014\065\015\067\016\035\017\033\020\032\021" +
    "\031\022\030\023\026\024\024\025\023\026\022\027\016" +
    "\030\014\031\041\032\040\001\001\000\002\001\001\000" +
    "\050\007\103\011\020\012\037\013\036\014\065\015\067" +
    "\016\035\017\033\020\032\021\031\022\030\023\026\024" +
    "\024\025\023\026\022\027\016\030\014\031\041\032\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\020\012" +
    "\037\013\036\015\101\016\035\017\033\020\032\021\031" +
    "\022\030\023\026\024\024\025\023\026\022\027\016\030" +
    "\014\031\041\032\040\001\001\000\004\013\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\105\006\056" +
    "\014\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public calc.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (calc.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		calc.Absyn.Program start_val = (calc.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              calc.Absyn.Program RESULT =null;
		calc.Absyn.ListDef p_1 = (calc.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ProgDef(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListDef ::= 
            {
              calc.Absyn.ListDef RESULT =null;
		 RESULT = new calc.Absyn.ListDef(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListDef ::= ListDef Def 
            {
              calc.Absyn.ListDef RESULT =null;
		calc.Absyn.ListDef p_1 = (calc.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Def p_2 = (calc.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Def ::= _SYMB_14 Exp _SYMB_0 
            {
              calc.Absyn.Def RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_2 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstDef(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Def ::= Type Id _SYMB_1 ListArg _SYMB_2 _SYMB_3 ListStm _SYMB_4 
            {
              calc.Absyn.Def RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		calc.Absyn.ListArg p_4 = (calc.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListStm p_7 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.FuncDef(p_1,p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= 
            {
              calc.Absyn.ListArg RESULT =null;
		 RESULT = new calc.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg 
            {
              calc.Absyn.ListArg RESULT =null;
		calc.Absyn.Arg p_1 = (calc.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= Arg _SYMB_5 ListArg 
            {
              calc.Absyn.ListArg RESULT =null;
		calc.Absyn.Arg p_1 = (calc.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListArg p_3 = (calc.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Arg ::= Type Id 
            {
              calc.Absyn.Arg RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ArgDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stm ::= Exp _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDef(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stm ::= Type Id _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stm ::= Exp Id _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDecl2(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stm ::= Type Id _SYMB_5 ListId _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListId p_4 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDecls(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= Type Id _SYMB_6 Exp _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_4 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmInit(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= _SYMB_13 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_2 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ReturnStm(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListStm ::= 
            {
              calc.Absyn.ListStm RESULT =null;
		 RESULT = new calc.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListStm ::= ListStm Stm 
            {
              calc.Absyn.ListStm RESULT =null;
		calc.Absyn.ListStm p_1 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_2 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp10 ::= Exp10 _SYMB_7 Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.LShift(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp10 ::= Exp10 _SYMB_8 Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.RShift(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp10 ::= Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp15 ::= _INTEGER_ 
            {
              calc.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IntExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp15 ::= _DOUBLE_ 
            {
              calc.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DoubleExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp15 ::= _STRING_ 
            {
              calc.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StringExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp15 ::= ListId 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.ListId p_1 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp15 ::= _SYMB_1 Exp _SYMB_2 
            {
              calc.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_2 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListId ::= Id 
            {
              calc.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListId ::= Id _SYMB_9 ListId 
            {
              calc.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListId p_3 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= _SYMB_10 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= _SYMB_11 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_12 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_15 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp1 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp1 ::= Exp2 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp2 ::= Exp3 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp3 ::= Exp4 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp4 ::= Exp5 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp5 ::= Exp6 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp6 ::= Exp7 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp7 ::= Exp8 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp8 ::= Exp9 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp9 ::= Exp10 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp11 ::= Exp12 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp12 ::= Exp13 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp13 ::= Exp14 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp14 ::= Exp15 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",24, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
