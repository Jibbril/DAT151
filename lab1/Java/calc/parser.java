
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package calc;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\002\000\002\005\003\000\002\005\005\000" +
    "\002\006\004\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\007\000\002\007\007\000\002\007" +
    "\004\000\002\007\007\000\002\007\007\000\002\007\005" +
    "\000\002\007\006\000\002\007\007\000\002\010\002\000" +
    "\002\010\004\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\012\006\000\002\012\006\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\005\000\002\014\002\000" +
    "\002\014\003\000\002\014\005\000\002\015\003\000\002" +
    "\015\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\003\000\002\020\003" +
    "\000\002\021\003\000\002\022\003\000\002\023\003\000" +
    "\002\024\003\000\002\025\003\000\002\026\003\000\002" +
    "\027\003\000\002\030\003\000\002\031\003\000\002\032" +
    "\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\016\002\ufffd\020\ufffd\022\ufffd\024\ufffd\027" +
    "\ufffd\030\ufffd\001\002\000\004\002\146\001\002\000\016" +
    "\002\000\020\014\022\013\024\012\027\010\030\007\001" +
    "\002\000\004\035\065\001\002\000\004\035\uffd7\001\002" +
    "\000\014\005\026\032\020\033\016\034\022\035\035\001" +
    "\002\000\016\002\ufffc\020\ufffc\022\ufffc\024\ufffc\027\ufffc" +
    "\030\ufffc\001\002\000\004\035\uffd8\001\002\000\004\035" +
    "\uffd9\001\002\000\004\035\uffda\001\002\000\020\004\uffcc" +
    "\006\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\035\uffcc\001" +
    "\002\000\024\004\uffe4\005\uffe4\006\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\035\uffe4\001\002\000\020\004" +
    "\uffe8\006\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\035\uffe8" +
    "\001\002\000\024\004\uffe2\005\uffe2\006\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\035\uffe2\001\002\000\020" +
    "\004\uffcd\006\uffcd\011\uffcd\013\062\014\061\016\uffcd\035" +
    "\uffcd\001\002\000\024\004\uffe3\005\uffe3\006\uffe3\011\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\035\uffe3\001\002\000" +
    "\014\004\uffce\006\uffce\011\uffce\016\uffce\035\uffce\001\002" +
    "\000\014\004\uffcf\006\uffcf\011\uffcf\016\uffcf\035\uffcf\001" +
    "\002\000\014\004\uffd0\006\uffd0\011\uffd0\016\uffd0\035\uffd0" +
    "\001\002\000\014\005\026\032\020\033\016\034\022\035" +
    "\035\001\002\000\004\004\056\001\002\000\014\004\uffd1" +
    "\006\uffd1\011\uffd1\016\uffd1\035\uffd1\001\002\000\014\004" +
    "\uffd2\006\uffd2\011\uffd2\016\uffd2\035\uffd2\001\002\000\014" +
    "\004\uffd3\006\uffd3\011\uffd3\016\uffd3\035\uffd3\001\002\000" +
    "\014\004\uffd4\006\uffd4\011\uffd4\016\uffd4\035\uffd4\001\002" +
    "\000\014\004\uffd5\006\uffd5\011\uffd5\016\uffd5\035\uffd5\001" +
    "\002\000\026\004\uffdc\005\uffdc\006\uffdc\011\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\054\035\uffdc\001\002\000" +
    "\014\004\uffd6\006\uffd6\011\uffd6\016\uffd6\035\uffd6\001\002" +
    "\000\024\004\uffe1\005\uffe1\006\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\035\uffe1\001\002\000\024\004\uffe5" +
    "\005\uffe5\006\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\035\uffe5\001\002\000\024\004\uffca\005\043\006\uffca" +
    "\011\uffca\013\uffca\014\uffca\015\044\016\uffca\035\uffca\001" +
    "\002\000\020\004\uffcb\006\uffcb\011\uffcb\013\uffcb\014\uffcb" +
    "\016\uffcb\035\uffcb\001\002\000\016\005\026\006\uffdf\032" +
    "\020\033\016\034\022\035\035\001\002\000\014\005\026" +
    "\032\020\033\016\034\022\035\035\001\002\000\004\016" +
    "\046\001\002\000\024\004\uffe7\005\uffe7\006\uffe7\011\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\035\uffe7\001\002\000" +
    "\004\006\053\001\002\000\006\006\uffde\011\051\001\002" +
    "\000\016\005\026\006\uffdf\032\020\033\016\034\022\035" +
    "\035\001\002\000\004\006\uffdd\001\002\000\024\004\uffe6" +
    "\005\uffe6\006\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\035\uffe6\001\002\000\004\035\035\001\002\000\024" +
    "\004\uffdb\005\uffdb\006\uffdb\011\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\035\uffdb\001\002\000\016\002\uffff\020\uffff" +
    "\022\uffff\024\uffff\027\uffff\030\uffff\001\002\000\004\006" +
    "\060\001\002\000\024\004\uffe0\005\uffe0\006\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\035\uffe0\001\002\000" +
    "\014\005\026\032\020\033\016\034\022\035\035\001\002" +
    "\000\014\005\026\032\020\033\016\034\022\035\035\001" +
    "\002\000\020\004\uffea\006\uffea\011\uffea\013\uffea\014\uffea" +
    "\016\uffea\035\uffea\001\002\000\020\004\uffe9\006\uffe9\011" +
    "\uffe9\013\uffe9\014\uffe9\016\uffe9\035\uffe9\001\002\000\004" +
    "\005\066\001\002\000\014\006\ufffb\020\014\022\013\024" +
    "\012\030\007\001\002\000\004\035\145\001\002\000\006" +
    "\006\ufffa\011\143\001\002\000\004\006\072\001\002\000" +
    "\004\007\073\001\002\000\040\005\uffec\007\uffec\010\uffec" +
    "\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\001\002" +
    "\000\040\005\026\007\103\010\102\020\014\022\013\023" +
    "\100\024\012\025\077\026\076\030\007\031\105\032\020" +
    "\033\016\034\022\035\035\001\002\000\040\005\uffeb\007" +
    "\uffeb\010\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\001\002\000\014\020\014\021\135\022\013\024\012" +
    "\030\007\001\002\000\036\005\026\007\103\020\014\022" +
    "\013\023\100\024\012\025\077\026\076\030\007\031\105" +
    "\032\020\033\016\034\022\035\035\001\002\000\004\005" +
    "\127\001\002\000\004\035\117\001\002\000\016\002\ufffe" +
    "\020\ufffe\022\ufffe\024\ufffe\027\ufffe\030\ufffe\001\002\000" +
    "\040\005\uffec\007\uffec\010\uffec\020\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\001\002\000\006\004\113\035\112" +
    "\001\002\000\004\005\106\001\002\000\014\005\026\032" +
    "\020\033\016\034\022\035\035\001\002\000\004\006\110" +
    "\001\002\000\036\005\026\007\103\020\014\022\013\023" +
    "\100\024\012\025\077\026\076\030\007\031\105\032\020" +
    "\033\016\034\022\035\035\001\002\000\040\005\ufff1\007" +
    "\ufff1\010\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\001\002\000\004\004\114\001\002\000\040\005\ufff7" +
    "\007\ufff7\010\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\001\002\000\040\005\ufff5\007\ufff5\010\ufff5\020" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\001\002\000" +
    "\040\005\026\007\103\010\116\020\014\022\013\023\100" +
    "\024\012\025\077\026\076\030\007\031\105\032\020\033" +
    "\016\034\022\035\035\001\002\000\040\005\uffef\007\uffef" +
    "\010\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\001\002\000\010\004\120\011\122\012\121\001\002\000" +
    "\040\005\ufff6\007\ufff6\010\ufff6\020\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\001\002\000\014\005\026\032\020" +
    "\033\016\034\022\035\035\001\002\000\004\035\035\001" +
    "\002\000\004\004\124\001\002\000\040\005\ufff4\007\ufff4" +
    "\010\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\001\002\000\004\004\126\001\002\000\040\005\ufff3\007" +
    "\ufff3\010\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\001\002\000\014\005\026\032\020\033\016\034\022" +
    "\035\035\001\002\000\004\006\131\001\002\000\036\005" +
    "\026\007\103\020\014\022\013\023\100\024\012\025\077" +
    "\026\076\030\007\031\105\032\020\033\016\034\022\035" +
    "\035\001\002\000\040\005\ufff0\007\ufff0\010\ufff0\020\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000\040" +
    "\005\ufff2\007\ufff2\010\ufff2\020\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\001\002\000\004\035\141\001\002\000" +
    "\012\020\014\022\013\024\012\030\007\001\002\000\004" +
    "\035\137\001\002\000\004\004\140\001\002\000\040\005" +
    "\uffed\007\uffed\010\uffed\020\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\001\002\000\004\004\142\001\002\000\040" +
    "\005\uffee\007\uffee\010\uffee\020\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\001\002\000\014\006\ufffb\020\014\022" +
    "\013\024\012\030\007\001\002\000\004\006\ufff9\001\002" +
    "\000\006\006\ufff8\011\ufff8\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\010\016\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\020\012\040\013\037\015" +
    "\036\017\026\020\035\021\033\022\032\023\031\024\030" +
    "\025\027\026\024\027\023\030\022\031\016\032\014\033" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\020\012\040\013\037\015\036" +
    "\017\056\020\035\021\033\022\032\023\031\024\030\025" +
    "\027\026\024\027\023\030\022\031\016\032\014\033\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\020\012\040\013\037\014\046\015\036\017\047\020" +
    "\035\021\033\022\032\023\031\024\030\025\027\026\024" +
    "\027\023\030\022\031\016\032\014\033\041\001\001\000" +
    "\044\011\020\012\040\013\037\015\036\017\044\020\035" +
    "\021\033\022\032\023\031\024\030\025\027\026\024\027" +
    "\023\030\022\031\016\032\014\033\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\020\012\040\013\037\014\051\015\036" +
    "\017\047\020\035\021\033\022\032\023\031\024\030\025" +
    "\027\026\024\027\023\030\022\031\016\032\014\033\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\040\013\037\015" +
    "\036\031\063\032\014\033\041\001\001\000\016\012\040" +
    "\013\037\015\036\031\062\032\014\033\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\070\006\067\016\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\073\001\001\000\050\007\074\011\020\012\040\013" +
    "\037\015\036\016\100\017\103\020\035\021\033\022\032" +
    "\023\031\024\030\025\027\026\024\027\023\030\022\031" +
    "\016\032\014\033\041\001\001\000\002\001\001\000\004" +
    "\016\133\001\001\000\050\007\132\011\020\012\040\013" +
    "\037\015\036\016\100\017\103\020\035\021\033\022\032" +
    "\023\031\024\030\025\027\026\024\027\023\030\022\031" +
    "\016\032\014\033\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\020\012\040" +
    "\013\037\015\036\017\106\020\035\021\033\022\032\023" +
    "\031\024\030\025\027\026\024\027\023\030\022\031\016" +
    "\032\014\033\041\001\001\000\002\001\001\000\050\007" +
    "\110\011\020\012\040\013\037\015\036\016\100\017\103" +
    "\020\035\021\033\022\032\023\031\024\030\025\027\026" +
    "\024\027\023\030\022\031\016\032\014\033\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\007\074\011\020\012\040\013\037" +
    "\015\036\016\100\017\103\020\035\021\033\022\032\023" +
    "\031\024\030\025\027\026\024\027\023\030\022\031\016" +
    "\032\014\033\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\020\012\040\013\037" +
    "\015\036\017\124\020\035\021\033\022\032\023\031\024" +
    "\030\025\027\026\024\027\023\030\022\031\016\032\014" +
    "\033\041\001\001\000\004\015\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\020\012\040\013\037\015\036\017\127\020" +
    "\035\021\033\022\032\023\031\024\030\025\027\026\024" +
    "\027\023\030\022\031\016\032\014\033\041\001\001\000" +
    "\002\001\001\000\050\007\131\011\020\012\040\013\037" +
    "\015\036\016\100\017\103\020\035\021\033\022\032\023" +
    "\031\024\030\025\027\026\024\027\023\030\022\031\016" +
    "\032\014\033\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\143\006\067\016\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public calc.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (calc.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		calc.Absyn.Program start_val = (calc.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              calc.Absyn.Program RESULT =null;
		calc.Absyn.ListDef p_1 = (calc.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ProgDef(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Def ::= _SYMB_19 Exp _SYMB_0 
            {
              calc.Absyn.Def RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_2 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstDef(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Def ::= Type Id _SYMB_1 ListArg _SYMB_2 _SYMB_3 ListStm _SYMB_4 
            {
              calc.Absyn.Def RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		calc.Absyn.ListArg p_4 = (calc.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListStm p_7 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.FuncDef(p_1,p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListDef ::= 
            {
              calc.Absyn.ListDef RESULT =null;
		 RESULT = new calc.Absyn.ListDef(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListDef ::= ListDef Def 
            {
              calc.Absyn.ListDef RESULT =null;
		calc.Absyn.ListDef p_1 = (calc.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Def p_2 = (calc.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= 
            {
              calc.Absyn.ListArg RESULT =null;
		 RESULT = new calc.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg 
            {
              calc.Absyn.ListArg RESULT =null;
		calc.Absyn.Arg p_1 = (calc.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= Arg _SYMB_5 ListArg 
            {
              calc.Absyn.ListArg RESULT =null;
		calc.Absyn.Arg p_1 = (calc.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListArg p_3 = (calc.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Arg ::= Type Id 
            {
              calc.Absyn.Arg RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ArgDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stm ::= Exp _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDef(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stm ::= Type Id _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stm ::= Exp Id _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDecl2(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stm ::= Type Id _SYMB_5 ListId _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListId p_4 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmDecls(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= Type Id _SYMB_6 Exp _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		calc.Absyn.Type p_1 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_4 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StmInit(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= _SYMB_17 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_2 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ReturnStm(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stm ::= _SYMB_21 _SYMB_1 Exp _SYMB_2 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_5 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.WhileStm(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stm ::= _SYMB_15 _SYMB_1 Exp _SYMB_2 Stm 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_5 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IfStm(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stm ::= _SYMB_3 ListStm _SYMB_4 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListStm p_2 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.BlockStm(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stm ::= _SYMB_18 Type Id _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Type p_2 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.TypeDefStm(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stm ::= _SYMB_18 _SYMB_13 Type Id _SYMB_0 
            {
              calc.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		calc.Absyn.Type p_3 = (calc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ConstTypeDefStm(p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListStm ::= 
            {
              calc.Absyn.ListStm RESULT =null;
		 RESULT = new calc.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListStm ::= ListStm Stm 
            {
              calc.Absyn.ListStm RESULT =null;
		calc.Absyn.ListStm p_1 = (calc.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Stm p_2 = (calc.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp10 ::= Exp10 _SYMB_7 Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.LShift(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp10 ::= Exp10 _SYMB_8 Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.RShift(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp10 ::= Exp11 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp14 ::= Exp14 _SYMB_9 Exp _SYMB_10 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_3 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IndexExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp14 ::= Exp14 _SYMB_1 ListExp _SYMB_2 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.ListExp p_3 = (calc.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.FunCallExp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp14 ::= Exp15 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp15 ::= _INTEGER_ 
            {
              calc.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IntExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp15 ::= _DOUBLE_ 
            {
              calc.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DoubleExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp15 ::= _STRING_ 
            {
              calc.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.StringExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp15 ::= ListId 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.ListId p_1 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.QualConstExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp15 ::= _SYMB_1 Exp _SYMB_2 
            {
              calc.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		calc.Absyn.Exp p_2 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListExp ::= 
            {
              calc.Absyn.ListExp RESULT =null;
		 RESULT = new calc.Absyn.ListExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListExp ::= Exp 
            {
              calc.Absyn.ListExp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListExp ::= Exp _SYMB_5 ListExp 
            {
              calc.Absyn.ListExp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListExp p_3 = (calc.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListId ::= Id 
            {
              calc.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListId ::= Id _SYMB_11 ListId 
            {
              calc.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		calc.Absyn.ListId p_3 = (calc.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= _SYMB_12 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= _SYMB_14 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= _SYMB_16 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= _SYMB_20 
            {
              calc.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new calc.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Exp1 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp1 ::= Exp2 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp2 ::= Exp3 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp3 ::= Exp4 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp4 ::= Exp5 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp5 ::= Exp6 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp6 ::= Exp7 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp7 ::= Exp8 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp8 ::= Exp9 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp9 ::= Exp10 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp11 ::= Exp12 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp12 ::= Exp13 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp13 ::= Exp14 
            {
              calc.Absyn.Exp RESULT =null;
		calc.Absyn.Exp p_1 = (calc.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",25, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
