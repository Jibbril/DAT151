// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.3).

// Parser definition for use with Java Cup
package arithm;

action code {:
public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}
:}
parser code {:
  public arithm.Absyn.Exp pExp() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (arithm.Absyn.Exp) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal arithm.Absyn.Exp Exp;
nonterminal arithm.Absyn.Exp Exp1;
nonterminal arithm.Absyn.Exp Exp2;

terminal _SYMB_0;    //   +
terminal _SYMB_1;    //   *
terminal _SYMB_2;    //   (
terminal _SYMB_3;    //   )



terminal Integer _INTEGER_;





start with Exp;


Exp ::= Exp:p_1 _SYMB_0:p_2 Exp1:p_3  {: RESULT = new arithm.Absyn.EAdd(p_1,p_3); :}
  | Exp1:p_1  {: RESULT = p_1; :}
;
Exp1 ::= Exp1:p_1 _SYMB_1:p_2 Exp2:p_3  {: RESULT = new arithm.Absyn.EMul(p_1,p_3); :}
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp2 ::= _INTEGER_:p_1  {: RESULT = new arithm.Absyn.EInt(p_1); :}
  | _SYMB_2:p_1 Exp:p_2 _SYMB_3:p_3  {: RESULT = p_2; :}
;

